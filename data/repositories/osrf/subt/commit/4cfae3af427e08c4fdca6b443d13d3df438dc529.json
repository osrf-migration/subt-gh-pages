{"rendered": {"message": {"raw": "Fix deadlock between Transport thread and ROS service callbacks\n\nThis fixes a deadlock that occurs when `SubtRosRelay::OnPoseFromArtifact` is called concurrently with `SubtRosRelay::OnMessage`. Consider two `subt_seed_node`s with robot names X1 and X2. Let's say X2 sends a message to X1. This is a call to `SubtRosRelay::OnSendTo` which sends the request to Transport and returns immediately. In the mean time, let's say X1 calls `SubtRosRelay::OnPoseFromArtifact`. Since X1 is single threaded node, this call is blocking. Now, if it happens that Tranport is ready to send the message from X2 to X1, it will invoke `SubtRosRelay::OnMessage` from a separate thread. This will in turn make a service call to X1 which happens to be blocking on its service call to `SubtRosRelay::OnPoseFromArtifact`.\n\nThe solution I found is to use a lock free data structure to queue up messages when they arrive at `SubtRosRelay::OnMessage` and process them in a separate thread.", "markup": "markdown", "html": "<p>Fix deadlock between Transport thread and ROS service callbacks</p>\n<p>This fixes a deadlock that occurs when <code>SubtRosRelay::OnPoseFromArtifact</code> is called concurrently with <code>SubtRosRelay::OnMessage</code>. Consider two <code>subt_seed_node</code>s with robot names X1 and X2. Let's say X2 sends a message to X1. This is a call to <code>SubtRosRelay::OnSendTo</code> which sends the request to Transport and returns immediately. In the mean time, let's say X1 calls <code>SubtRosRelay::OnPoseFromArtifact</code>. Since X1 is single threaded node, this call is blocking. Now, if it happens that Tranport is ready to send the message from X2 to X1, it will invoke <code>SubtRosRelay::OnMessage</code> from a separate thread. This will in turn make a service call to X1 which happens to be blocking on its service call to <code>SubtRosRelay::OnPoseFromArtifact</code>.</p>\n<p>The solution I found is to use a lock free data structure to queue up messages when they arrive at <code>SubtRosRelay::OnMessage</code> and process them in a separate thread.</p>", "type": "rendered"}}, "hash": "4cfae3af427e08c4fdca6b443d13d3df438dc529", "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "links": {"self": {"href": "data/repositories/osrf/subt/commit/4cfae3af427e08c4fdca6b443d13d3df438dc529.json"}, "comments": {"href": "data/repositories/osrf/subt/commit/4cfae3af427e08c4fdca6b443d13d3df438dc529/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/subt/patch/4cfae3af427e08c4fdca6b443d13d3df438dc529"}, "html": {"href": "#!/osrf/subt/commits/4cfae3af427e08c4fdca6b443d13d3df438dc529"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/subt/diff/4cfae3af427e08c4fdca6b443d13d3df438dc529"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/subt/commit/4cfae3af427e08c4fdca6b443d13d3df438dc529/approve"}, "statuses": {"href": "data/repositories/osrf/subt/commit/4cfae3af427e08c4fdca6b443d13d3df438dc529/statuses_page=1.json"}}, "author": {"raw": "Addisu Z. Taddese <addisu@openrobotics.org>", "type": "author", "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}}, "summary": {"raw": "Fix deadlock between Transport thread and ROS service callbacks\n\nThis fixes a deadlock that occurs when `SubtRosRelay::OnPoseFromArtifact` is called concurrently with `SubtRosRelay::OnMessage`. Consider two `subt_seed_node`s with robot names X1 and X2. Let's say X2 sends a message to X1. This is a call to `SubtRosRelay::OnSendTo` which sends the request to Transport and returns immediately. In the mean time, let's say X1 calls `SubtRosRelay::OnPoseFromArtifact`. Since X1 is single threaded node, this call is blocking. Now, if it happens that Tranport is ready to send the message from X2 to X1, it will invoke `SubtRosRelay::OnMessage` from a separate thread. This will in turn make a service call to X1 which happens to be blocking on its service call to `SubtRosRelay::OnPoseFromArtifact`.\n\nThe solution I found is to use a lock free data structure to queue up messages when they arrive at `SubtRosRelay::OnMessage` and process them in a separate thread.", "markup": "markdown", "html": "<p>Fix deadlock between Transport thread and ROS service callbacks</p>\n<p>This fixes a deadlock that occurs when <code>SubtRosRelay::OnPoseFromArtifact</code> is called concurrently with <code>SubtRosRelay::OnMessage</code>. Consider two <code>subt_seed_node</code>s with robot names X1 and X2. Let's say X2 sends a message to X1. This is a call to <code>SubtRosRelay::OnSendTo</code> which sends the request to Transport and returns immediately. In the mean time, let's say X1 calls <code>SubtRosRelay::OnPoseFromArtifact</code>. Since X1 is single threaded node, this call is blocking. Now, if it happens that Tranport is ready to send the message from X2 to X1, it will invoke <code>SubtRosRelay::OnMessage</code> from a separate thread. This will in turn make a service call to X1 which happens to be blocking on its service call to <code>SubtRosRelay::OnPoseFromArtifact</code>.</p>\n<p>The solution I found is to use a lock free data structure to queue up messages when they arrive at <code>SubtRosRelay::OnMessage</code> and process them in a separate thread.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "310d79b0c84f6d29534ff55410ae92b40cb154c8", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/subt/commit/310d79b0c84f6d29534ff55410ae92b40cb154c8.json"}, "html": {"href": "#!/osrf/subt/commits/310d79b0c84f6d29534ff55410ae92b40cb154c8"}}}], "date": "2019-08-17T21:05:43+00:00", "message": "Fix deadlock between Transport thread and ROS service callbacks\n\nThis fixes a deadlock that occurs when `SubtRosRelay::OnPoseFromArtifact` is called concurrently with `SubtRosRelay::OnMessage`. Consider two `subt_seed_node`s with robot names X1 and X2. Let's say X2 sends a message to X1. This is a call to `SubtRosRelay::OnSendTo` which sends the request to Transport and returns immediately. In the mean time, let's say X1 calls `SubtRosRelay::OnPoseFromArtifact`. Since X1 is single threaded node, this call is blocking. Now, if it happens that Tranport is ready to send the message from X2 to X1, it will invoke `SubtRosRelay::OnMessage` from a separate thread. This will in turn make a service call to X1 which happens to be blocking on its service call to `SubtRosRelay::OnPoseFromArtifact`.\n\nThe solution I found is to use a lock free data structure to queue up messages when they arrive at `SubtRosRelay::OnMessage` and process them in a separate thread.", "type": "commit", "git_hash": "a8c1db793d57117b387c92121e23579ae71942f4", "tags": null, "branches": "comms_deadlock"}