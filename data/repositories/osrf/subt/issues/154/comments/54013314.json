{"links": {"self": {"href": "data/repositories/osrf/subt/issues/154/comments/54013314.json"}, "html": {"href": "#!/osrf/subt/issues/154#comment-54013314"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/subt/issues/154.json"}}, "type": "issue", "id": 154, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "title": "SystemSetupDockerInstall should contain the docker installation step"}, "content": {"raw": "Hi baila,\n\nSee answers/comments below:\n\n```\n1. I have my local catkin workspace which contains my codes, now what should be the next step till submission?\n2. How to use that subt virtual simulator?\n```\n\nFor #1 and #2 above, I suggest testing your code against the _SubT Simulator_ locally first using the testbed docker image \\(`subt-virutal-testbed:latest`\\). This should allow you to debug and test your controller\\(s\\).  Here is a quick example:  \n\n```\n# Open Terminal 1 and run the Virtual Testbed image with the robot configurations for your solution\n\n$ mkdir -p ~/subt_testbed && cd ~/subt_testbed\n\n$ wget #!/osrf/subt/raw/tunnel_circuit/docker/run.bash\n\n$ ./run.bash osrf/subt-virtual-testbed:latest tunnel_circuit_practice.ign worldName:=simple_tunnel_01 robotName1:=X1 robotConfig1:=X1_SENSOR_CONFIG_1\n\n\n# Open Terminal 2, go to your solution catkin workspace, and launch it as described for the subt_seed example\n\n$ cd ~/subt_solution\n\n$ source install/setup.bash\n\n$ roslaunch subt_seed x1.launch robot_name:=X1\n\n# Just replace [subt_solution] with the name of your catkin workspace and [subt_seed] with the name of your solution.\n# It's common for people to use the same name for both though.\n```\n\nAll the above is documented in the [Wiki](#!/osrf/subt/wiki/Home).\n\n\u200c\n\n```\n3. Where/How to use that Docker Composer?\n```\n\nYou use Docker Composer once your solution has been embedded inside a [Docker image](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/). I suggest you take a look at the [Dockerfile in subt\\_seed repo](#!/osrf/subt_seed/src/default/docker/subt_solution/Dockerfile) as a reference to create the image for yours.\n\n\u200c\n\n```\n4. What is the final \u2018thing\u2019 to be submitted?\n```\n\nThe final `thing` to submitted is the Docker image of your solution. Not the sim, not the bridge, not the testbed; just your solution code inside a Docker image.  However, we recommend competitors to run some simple/practice worlds in Cloudsim before going for their final real run.\n\nHTH!", "markup": "markdown", "html": "<p>Hi baila,</p>\n<p>See answers/comments below:</p>\n<div class=\"codehilite\"><pre><span></span>1. I have my local catkin workspace which contains my codes, now what should be the next step till submission?\n2. How to use that subt virtual simulator?\n</pre></div>\n\n\n<p>For <a href=\"#!/osrf/subt/issues/1/link-in-readmemd-to-system-setup-tutorial\" rel=\"nofollow\" title=\"Link in Readme.md to &quot;system setup tutorial&quot; doesn&#39;t exist\" class=\"ap-connect-link\"><s>#1</s></a> and <a href=\"#!/osrf/subt/issues/2/no-lava_tubelaunch-in-default-branch\" rel=\"nofollow\" title=\"No lava_tube.launch in default branch\" class=\"ap-connect-link\"><s>#2</s></a> above, I suggest testing your code against the <em>SubT Simulator</em> locally first using the testbed docker image (<code>subt-virutal-testbed:latest</code>). This should allow you to debug and test your controller(s).  Here is a quick example:  </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c c-Singleline\"># Open Terminal 1 and run the Virtual Testbed image with the robot configurations for your solution</span>\n\n$ <span class=\"n\">mkdir</span> -<span class=\"n\">p</span> ~/<span class=\"n\">subt_testbed</span> &amp;&amp; <span class=\"n\">cd</span> ~/<span class=\"n\">subt_testbed</span>\n\n$ <span class=\"n\">wget</span> <span class=\"n\">https:</span>//<span class=\"n\">bitbucket</span>.<span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">osrf</span><span class=\"o\">/</span><span class=\"n\">subt</span><span class=\"o\">/</span><span class=\"n\">raw</span><span class=\"o\">/</span><span class=\"n\">tunnel_circuit</span><span class=\"o\">/</span><span class=\"n\">docker</span><span class=\"o\">/</span><span class=\"nb\">run</span>.<span class=\"n\">bash</span>\n\n$ ./<span class=\"nb\">run</span>.<span class=\"n\">bash</span> <span class=\"n\">osrf</span><span class=\"o\">/</span><span class=\"n\">subt-virtual-testbed:latest</span> <span class=\"n\">tunnel_circuit_practice</span>.<span class=\"n\">ign</span> <span class=\"n\">worldName:</span>=<span class=\"n\">simple_tunnel_01</span> <span class=\"n\">robotName1:</span>=<span class=\"n\">X1</span> <span class=\"n\">robotConfig1:</span>=<span class=\"n\">X1_SENSOR_CONFIG_1</span>\n\n\n<span class=\"c c-Singleline\"># Open Terminal 2, go to your solution catkin workspace, and launch it as described for the subt_seed example</span>\n\n$ <span class=\"n\">cd</span> ~/<span class=\"n\">subt_solution</span>\n\n$ <span class=\"n\">source</span> <span class=\"n\">install</span><span class=\"o\">/</span><span class=\"n\">setup</span>.<span class=\"n\">bash</span>\n\n$ <span class=\"n\">roslaunch</span> <span class=\"n\">subt_seed</span> <span class=\"n\">x1</span>.<span class=\"n\">launch</span> <span class=\"n\">robot_name:</span>=<span class=\"n\">X1</span>\n\n<span class=\"c c-Singleline\"># Just replace [subt_solution] with the name of your catkin workspace and [subt_seed] with the name of your solution.</span>\n<span class=\"c c-Singleline\"># It&#39;s common for people to use the same name for both though.</span>\n</pre></div>\n\n\n<p>All the above is documented in the <a data-is-external-link=\"true\" href=\"#!/osrf/subt/wiki/Home\" rel=\"nofollow\">Wiki</a>.</p>\n<p>\u200c</p>\n<div class=\"codehilite\"><pre><span></span>3. Where/How to use that Docker Composer?\n</pre></div>\n\n\n<p>You use Docker Composer once your solution has been embedded inside a <a data-is-external-link=\"true\" href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\" rel=\"nofollow\">Docker image</a>. I suggest you take a look at the <a data-is-external-link=\"true\" href=\"#!/osrf/subt_seed/src/default/docker/subt_solution/Dockerfile\" rel=\"nofollow\">Dockerfile in subt_seed repo</a> as a reference to create the image for yours.</p>\n<p>\u200c</p>\n<div class=\"codehilite\"><pre><span></span>4. What is the final \u2018thing\u2019 to be submitted?\n</pre></div>\n\n\n<p>The final <code>thing</code> to submitted is the Docker image of your solution. Not the sim, not the bridge, not the testbed; just your solution code inside a Docker image.  However, we recommend competitors to run some simple/practice worlds in Cloudsim before going for their final real run.</p>\n<p>HTH!</p>", "type": "rendered"}, "created_on": "2019-09-21T18:54:37.031926+00:00", "user": {"display_name": "Alfredo Bencomo", "uuid": "{84891a71-dff2-4b97-8891-9446c16e6f89}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B84891a71-dff2-4b97-8891-9446c16e6f89%7D"}, "html": {"href": "https://bitbucket.org/%7B84891a71-dff2-4b97-8891-9446c16e6f89%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5cf75629ff02b50ea27b2817/82be1d48-d490-4d7b-8ddb-a8093b9417a6/128"}}, "nickname": "bencomo", "type": "user", "account_id": "5cf75629ff02b50ea27b2817"}, "updated_on": null, "type": "issue_comment", "id": 54013314}