{"links": {"self": {"href": "data/repositories/osrf/subt/issues/186/comments/54074666.json"}, "html": {"href": "#!/osrf/subt/issues/186#comment-54074666"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/subt/issues/186.json"}}, "type": "issue", "id": 186, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "title": "Reporting artifacts"}, "content": {"raw": "Hi Carlos.  I\u2019m testing with an X1 and an X2 team, and the real time factor throughout my comms test fluctuates around 50-60%.  I think I\u2019ve established that the artifact report from my robots get to the base station almost instantaneously, the base station processes the report and sends back an acknowledgement just as quickly, but then it takes a long time for the report to get back to the robot.  Maybe I\u2019m doing something silly though - here are the relevant snippets from my code, where I\u2019m trying to reproduce what\u2019s done in \u2018subt/subt\\_ign/test/score.cc\u2019.\n\nSetup our comms manager:\n\n\u200c\n\n```\nCommsManager::CommsManager(const std::string &_address) : address(_address)\n{\n    printf(\"Bind Address is [%s]\\n\",_address.c_str());\n    this->client = std::make_unique<subt::CommsClient>(_address, false,false);\n    this->client->Bind(&CommsManager::receive_receipt, this, _address, this->receipt_port);\n}\n```\n\nreceive\\_receipt callback:\n\n\u200c\n\n```\nvoid CommsManager::receive_receipt( const std::string &_srcAddress,\n                                    const std::string &_dstAddress,\n                                    const uint32_t _dstPort,\n                                    const std::string &_data)\n{\n    ROS_INFO_STREAM( \"[\" << this->address << \"] CommsManager: Received RECEIPT \"\n                          << _srcAddress << \"->\" << _dstAddress <<  \":\" << _dstPort);\n\n    if(_srcAddress == \"base_station\"){\n        receive_artifact_ACK(_srcAddress, _dstAddress, _dstPort, _data);\n    }\n    ...\n```\n\nWhich in turn calls the receive\\_artifact\\_ACK function when the message is from the base\\_station:\n\n\u200c\n\n```\nvoid CommsManager::receive_artifact_ACK(const std::string &_srcAddress,\n                                        const std::string &_dstAddress,\n                                        const uint32_t _dstPort,\n                                        const std::string &_data)\n{\n    subt::msgs::ArtifactScore ack;\n    if(!ack.ParseFromString(_data)){\n        std::cerr<<\"Error parsing artifact score response\"<<std::endl;\n    }\n    else{\n        auto realTime = std::chrono::steady_clock::now().time_since_epoch();\n        auto seconds = std::chrono::duration_cast<std::chrono::seconds>(realTime);\n        ignition::msgs::Time submission_time = ack.submitted_datetime();\n        ROS_INFO_STREAM(address << \" has received an ACK!\");\n        ROS_INFO_STREAM(address<< \" ACK ID:\"<<ack.report_id()<<\", report status:\"<< ack.report_status()<<\", score change:\"<<ack.score_change()<<\n        \"\\n\"<<\"artifact = \"<<ack.artifact().type()<<\" at \"<<ack.artifact().pose().position().x() << \", \"<< ack.artifact().pose().position().y() <<\", \"<<ack.artifact().pose().position().z() << \"\\n submission time = \"\n        << submission_time.sec()<<\n        \"\\n current time = \"<<seconds.count());\n        score_ACKs.push_back(ack);\n    }\n}\n```\n\nAnd finally the function where we send the artifact report to the base station and wait for the score\\_ACKs vector to change:\n\n\u200c\n\n```\nbool CommsManager::send_to_base_station(const subt::msgs::Artifact &a)\n{\n    using namespace std::chrono_literals;\n    // Serialize the artifact.\n    std::string serializedData;\n    if (!a.SerializeToString(&serializedData))\n    {\n        std::cerr << \"CommsClient::SendToBaseStation(): Error serializing message\\n\"\n                  << a.DebugString() << std::endl;\n        return false;\n    }\n\n    // Send data to the base station.\n    ROS_INFO_STREAM(\"[\" << this->address << \"] TO BASE STATION (\" << base_station_address << \"): \" << serializedData);\n\n    int num_acks = score_ACKs.size();\n\n    auto realTime = std::chrono::steady_clock::now().time_since_epoch();\n    auto seconds = std::chrono::duration_cast<std::chrono::seconds>(realTime);\n\n    ROS_INFO_STREAM(\"[\" << this->address << \"] # ACK = \"<<score_ACKs.size()<< \" at time \"<< seconds.count());\n    this->client->SendTo(serializedData, base_station_address, 4100);\n\n    int attempt = 0;\n    while(score_ACKs.size() == num_acks && attempt < 20){\n        attempt++;\n        std::this_thread::sleep_for(500ms);\n        if(attempt % 10 == 0){\n            realTime = std::chrono::steady_clock::now().time_since_epoch();\n            seconds = std::chrono::duration_cast<std::chrono::seconds>(realTime);\n            ROS_INFO_STREAM(\"[\" << this->address << \"] received # ACK = \"<< score_ACKs.size() <<\" on attempt = \"<<attempt<<\" at time \"<<seconds.count());\n        }\n    }\n\n    ROS_INFO_STREAM(\"[\" << this->address << \"] required # attempts to receive ACK = \"<<attempt);\n    \n    if(score_ACKs.size() > num_acks){\n        return true;\n    }\n    return false;\n}\n```\n\nAs an example of the output from the receive\\_artifact\\_ACK when we eventually receive an acknowledgement:\n\n\u200c\n\n```\n...\n[ INFO] [1569420641.165585155, 27.368000000]: X1 ACK ID:2, report status:scored, score change:0\nartifact = 2 at -3.5, 13.5, 10.0615\n submission time = 290489\n current time = 290509\n...\n```\n\nI\u2019ve added some output lines to the subt comms code to figure out when the base station receives the report and sends back an acknowledgement, and the messages corresponding to the above receive\\_artifact\\_ACK output is:\n\n\u200c\n\n```\n[Dbg] [VisibilityRfModel.cc:80] Range: 12.3695, Exp: 2.5, TX: 20, RX: -47.3088\n[Dbg] [GameLogicPlugin.cc:515] Score plugin received artifact at 290489\n[Msg]   [Total]: 0\n[Msg] Total score: 0\n[Dbg] [VisibilityRfModel.cc:80] Range: 13.0007, Exp: 2.5, TX: 20, RX: -47.8491\n[Dbg] [GameLogicPlugin.cc:515] Score plugin received artifact at 290489\n[Msg]   [Total]: 0\n[Msg] Total score: 0\n[Dbg] [BaseStationPlugin.cc:106] Sending ArtifactScore back to robot X1, REPORT ID = 2 at time 290489\n[Dbg] [subt_communication_client.cpp:301] Calling SendTo (Ignition) to X1 at time 290489\n```\n\nSo it looks like the robot sends a report at 290489, the base station receives and responds at 290489, but then our code doesn\u2019t pick it up until 290509.  Do you see anything on our end that might be responsible for the one-way delay?  Thanks, and sorry for the very long post :-\\)", "markup": "markdown", "html": "<p>Hi Carlos.  I\u2019m testing with an X1 and an X2 team, and the real time factor throughout my comms test fluctuates around 50-60%.  I think I\u2019ve established that the artifact report from my robots get to the base station almost instantaneously, the base station processes the report and sends back an acknowledgement just as quickly, but then it takes a long time for the report to get back to the robot.  Maybe I\u2019m doing something silly though - here are the relevant snippets from my code, where I\u2019m trying to reproduce what\u2019s done in \u2018subt/subt_ign/test/score.cc\u2019.</p>\n<p>Setup our comms manager:</p>\n<p>\u200c</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">CommsManager</span><span class=\"p\">::</span><span class=\"nd\">CommsManager</span><span class=\"o\">(</span><span class=\"nt\">const</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">string</span> <span class=\"o\">&amp;</span><span class=\"nt\">_address</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"nt\">address</span><span class=\"o\">(</span><span class=\"nt\">_address</span><span class=\"o\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"err\">printf(&quot;Bind</span> <span class=\"err\">Address</span> <span class=\"err\">is</span> <span class=\"cp\">[</span><span class=\"o\">%</span><span class=\"nx\">s</span><span class=\"cp\">]</span><span class=\"err\">\\n&quot;,_address.c_str())</span><span class=\"p\">;</span>\n    <span class=\"err\">this-&gt;client</span> <span class=\"err\">=</span> <span class=\"n\">std</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">make_unique</span><span class=\"o\">&lt;</span><span class=\"n\">subt</span><span class=\"o\">::</span><span class=\"n\">CommsClient</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_address</span><span class=\"p\">,</span> <span class=\"n\">false</span><span class=\"p\">,</span><span class=\"n\">false</span><span class=\"p\">);</span>\n    <span class=\"err\">this-&gt;client-&gt;Bind(&amp;</span><span class=\"n\">CommsManager</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">receive_receipt</span><span class=\"p\">,</span> <span class=\"n\">this</span><span class=\"p\">,</span> <span class=\"n\">_address</span><span class=\"p\">,</span> <span class=\"n\">this-</span><span class=\"o\">&gt;</span><span class=\"n\">receipt_port</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>receive_receipt callback:</p>\n<p>\u200c</p>\n<div class=\"codehilite\"><pre><span></span>void CommsManager::receive_receipt( const std::string &amp;_srcAddress,\n                                    const std::string &amp;_dstAddress,\n                                    const uint32_t _dstPort,\n                                    const std::string &amp;_data)\n{\n    ROS_INFO_STREAM( &quot;[&quot; &lt;&lt; this-&gt;address &lt;&lt; &quot;] CommsManager: Received RECEIPT &quot;\n                          &lt;&lt; _srcAddress &lt;&lt; &quot;-&gt;&quot; &lt;&lt; _dstAddress &lt;&lt;  &quot;:&quot; &lt;&lt; _dstPort);\n\n    if(_srcAddress == &quot;base_station&quot;){\n        receive_artifact_ACK(_srcAddress, _dstAddress, _dstPort, _data);\n    }\n    ...\n</pre></div>\n\n\n<p>Which in turn calls the receive_artifact_ACK function when the message is from the base_station:</p>\n<p>\u200c</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">void</span> <span class=\"nt\">CommsManager</span><span class=\"p\">::</span><span class=\"nd\">receive_artifact_ACK</span><span class=\"o\">(</span><span class=\"nt\">const</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">string</span> <span class=\"o\">&amp;</span><span class=\"nt\">_srcAddress</span><span class=\"o\">,</span>\n                                        <span class=\"nt\">const</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">string</span> <span class=\"o\">&amp;</span><span class=\"nt\">_dstAddress</span><span class=\"o\">,</span>\n                                        <span class=\"nt\">const</span> <span class=\"nt\">uint32_t</span> <span class=\"nt\">_dstPort</span><span class=\"o\">,</span>\n                                        <span class=\"nt\">const</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">string</span> <span class=\"o\">&amp;</span><span class=\"nt\">_data</span><span class=\"o\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">subt</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">ArtifactScore</span> <span class=\"n\">ack</span><span class=\"p\">;</span>\n    <span class=\"err\">if(!ack.ParseFromString(_data)){</span>\n        <span class=\"n\">std</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">cerr</span><span class=\"o\">&lt;&lt;</span><span class=\"s2\">&quot;Error parsing artifact score response&quot;</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"nt\">else</span><span class=\"p\">{</span>\n        <span class=\"err\">auto</span> <span class=\"err\">realTime</span> <span class=\"err\">=</span> <span class=\"n\">std</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">steady_clock</span><span class=\"o\">::</span><span class=\"nf\">now</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">time_since_epoch</span><span class=\"p\">();</span>\n        <span class=\"err\">auto</span> <span class=\"err\">seconds</span> <span class=\"err\">=</span> <span class=\"n\">std</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">duration_cast</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">seconds</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">realTime</span><span class=\"p\">);</span>\n        <span class=\"n\">ignition</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Time</span> <span class=\"n\">submission_time</span> <span class=\"o\">=</span> <span class=\"n\">ack</span><span class=\"o\">.</span><span class=\"nf\">submitted_datetime</span><span class=\"p\">();</span>\n        <span class=\"err\">ROS_INFO_STREAM(address</span> <span class=\"err\">&lt;&lt;</span> <span class=\"err\">&quot;</span> <span class=\"err\">has</span> <span class=\"err\">received</span> <span class=\"err\">an</span> <span class=\"err\">ACK!&quot;)</span><span class=\"p\">;</span>\n        <span class=\"err\">ROS_INFO_STREAM(address&lt;&lt;</span> <span class=\"err\">&quot;</span> <span class=\"err\">ACK</span> <span class=\"n\">ID</span><span class=\"p\">:</span><span class=\"s2\">&quot;&lt;&lt;ack.report_id()&lt;&lt;&quot;</span><span class=\"p\">,</span> <span class=\"n\">report</span> <span class=\"n\">status</span><span class=\"o\">:</span><span class=\"s2\">&quot;&lt;&lt; ack.report_status()&lt;&lt;&quot;</span><span class=\"p\">,</span> <span class=\"n\">score</span> <span class=\"n\">change</span><span class=\"o\">:</span><span class=\"s2\">&quot;&lt;&lt;ack.score_change()&lt;&lt;</span>\n<span class=\"s2\">        &quot;</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s2\">&quot;&lt;&lt;&quot;</span><span class=\"n\">artifact</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&lt;&lt;ack.artifact().type()&lt;&lt;&quot;</span> <span class=\"n\">at</span> <span class=\"s2\">&quot;&lt;&lt;ack.artifact().pose().position().x() &lt;&lt; &quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&lt;&lt; ack.artifact().pose().position().y() &lt;&lt;&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&lt;&lt;ack.artifact().pose().position().z() &lt;&lt; &quot;</span><span class=\"err\">\\</span><span class=\"n\">n</span> <span class=\"n\">submission</span> <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span>\n<span class=\"s2\">        &lt;&lt; submission_time.sec()&lt;&lt;</span>\n<span class=\"s2\">        &quot;</span><span class=\"err\">\\</span><span class=\"n\">n</span> <span class=\"n\">current</span> <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"err\">&quot;</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">seconds</span><span class=\"o\">.</span><span class=\"nf\">count</span><span class=\"p\">());</span>\n        <span class=\"err\">score_ACKs.push_back(ack)</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"err\">}</span>\n</pre></div>\n\n\n<p>And finally the function where we send the artifact report to the base station and wait for the score_ACKs vector to change:</p>\n<p>\u200c</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">bool</span> <span class=\"n\">CommsManager</span><span class=\"o\">::</span><span class=\"n\">send_to_base_station</span><span class=\"p\">(</span><span class=\"kr\">const</span> <span class=\"n\">subt</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Artifact</span> <span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">using</span> <span class=\"n\">namespace</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono_literals</span><span class=\"p\">;</span>\n    <span class=\"c1\">// Serialize the artifact.</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"kr\">string</span> <span class=\"n\">serializedData</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">SerializeToString</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">serializedData</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;CommsClient::SendToBaseStation(): Error serializing message</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span>\n                  <span class=\"o\">&lt;&lt;</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">DebugString</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"kr\">false</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// Send data to the base station.</span>\n    <span class=\"n\">ROS_INFO_STREAM</span><span class=\"p\">(</span><span class=\"s\">&quot;[&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">address</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;] TO BASE STATION (&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">base_station_address</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;): &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">serializedData</span><span class=\"p\">);</span>\n\n    <span class=\"kr\">int</span> <span class=\"n\">num_acks</span> <span class=\"o\">=</span> <span class=\"n\">score_ACKs</span><span class=\"p\">.</span><span class=\"nf\">size</span><span class=\"p\">();</span>\n\n    <span class=\"kr\">auto</span> <span class=\"n\">realTime</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">steady_clock</span><span class=\"o\">::</span><span class=\"n\">now</span><span class=\"p\">().</span><span class=\"n\">time_since_epoch</span><span class=\"p\">();</span>\n    <span class=\"kr\">auto</span> <span class=\"n\">seconds</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">duration_cast</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">seconds</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">realTime</span><span class=\"p\">);</span>\n\n    <span class=\"n\">ROS_INFO_STREAM</span><span class=\"p\">(</span><span class=\"s\">&quot;[&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">address</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;] # ACK = &quot;</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">score_ACKs</span><span class=\"p\">.</span><span class=\"nf\">size</span><span class=\"p\">()</span><span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot; at time &quot;</span><span class=\"o\">&lt;&lt;</span> <span class=\"n\">seconds</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"p\">());</span>\n    <span class=\"n\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">client</span><span class=\"o\">-&gt;</span><span class=\"n\">SendTo</span><span class=\"p\">(</span><span class=\"n\">serializedData</span><span class=\"p\">,</span> <span class=\"n\">base_station_address</span><span class=\"p\">,</span> <span class=\"mi\">4100</span><span class=\"p\">);</span>\n\n    <span class=\"kr\">int</span> <span class=\"n\">attempt</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">score_ACKs</span><span class=\"p\">.</span><span class=\"nf\">size</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">num_acks</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">attempt</span> <span class=\"o\">&lt;</span> <span class=\"mi\">20</span><span class=\"p\">){</span>\n        <span class=\"n\">attempt</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">this_thread</span><span class=\"o\">::</span><span class=\"n\">sleep_for</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"n\">ms</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">attempt</span> <span class=\"o\">%</span> <span class=\"mi\">10</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">){</span>\n            <span class=\"n\">realTime</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">steady_clock</span><span class=\"o\">::</span><span class=\"n\">now</span><span class=\"p\">().</span><span class=\"n\">time_since_epoch</span><span class=\"p\">();</span>\n            <span class=\"n\">seconds</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">duration_cast</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">seconds</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">realTime</span><span class=\"p\">);</span>\n            <span class=\"n\">ROS_INFO_STREAM</span><span class=\"p\">(</span><span class=\"s\">&quot;[&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">address</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;] received # ACK = &quot;</span><span class=\"o\">&lt;&lt;</span> <span class=\"n\">score_ACKs</span><span class=\"p\">.</span><span class=\"nf\">size</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">&quot; on attempt = &quot;</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">attempt</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&quot; at time &quot;</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">seconds</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"p\">());</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">ROS_INFO_STREAM</span><span class=\"p\">(</span><span class=\"s\">&quot;[&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">address</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;] required # attempts to receive ACK = &quot;</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">attempt</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">score_ACKs</span><span class=\"p\">.</span><span class=\"nf\">size</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">num_acks</span><span class=\"p\">){</span>\n        <span class=\"k\">return</span> <span class=\"kr\">true</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"kr\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>As an example of the output from the receive_artifact_ACK when we eventually receive an acknowledgement:</p>\n<p>\u200c</p>\n<div class=\"codehilite\"><pre><span></span>...\n[ INFO] [1569420641.165585155, 27.368000000]: X1 ACK ID:2, report status:scored, score change:0\nartifact = 2 at -3.5, 13.5, 10.0615\n submission time = 290489\n current time = 290509\n...\n</pre></div>\n\n\n<p>I\u2019ve added some output lines to the subt comms code to figure out when the base station receives the report and sends back an acknowledgement, and the messages corresponding to the above receive_artifact_ACK output is:</p>\n<p>\u200c</p>\n<div class=\"codehilite\"><pre><span></span>[Dbg] [VisibilityRfModel.cc:80] Range: 12.3695, Exp: 2.5, TX: 20, RX: -47.3088\n[Dbg] [GameLogicPlugin.cc:515] Score plugin received artifact at 290489\n[Msg]   [Total]: 0\n[Msg] Total score: 0\n[Dbg] [VisibilityRfModel.cc:80] Range: 13.0007, Exp: 2.5, TX: 20, RX: -47.8491\n[Dbg] [GameLogicPlugin.cc:515] Score plugin received artifact at 290489\n[Msg]   [Total]: 0\n[Msg] Total score: 0\n[Dbg] [BaseStationPlugin.cc:106] Sending ArtifactScore back to robot X1, REPORT ID = 2 at time 290489\n[Dbg] [subt_communication_client.cpp:301] Calling SendTo (Ignition) to X1 at time 290489\n</pre></div>\n\n\n<p>So it looks like the robot sends a report at 290489, the base station receives and responds at 290489, but then our code doesn\u2019t pick it up until 290509.  Do you see anything on our end that might be responsible for the one-way delay?  Thanks, and sorry for the very long post :-)</p>", "type": "rendered"}, "created_on": "2019-09-25T14:28:37.062970+00:00", "user": {"display_name": "Joe Palk", "uuid": "{5cc8ea43-8141-495c-84a6-d43c27045e87}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cc8ea43-8141-495c-84a6-d43c27045e87%7D"}, "html": {"href": "https://bitbucket.org/%7B5cc8ea43-8141-495c-84a6-d43c27045e87%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5d234ef34b35f80c57643503/eccf6b09-606c-456e-a48e-e1b9a48f93e0/128"}}, "nickname": "jepalk", "type": "user", "account_id": "5d234ef34b35f80c57643503"}, "updated_on": null, "type": "issue_comment", "id": 54074666}