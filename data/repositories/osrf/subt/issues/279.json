{"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "links": {"attachments": {"href": "data/repositories/osrf/subt/issues/279/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/subt/issues/279.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/subt/issues/279/watch"}, "comments": {"href": "data/repositories/osrf/subt/issues/279/comments_page=1.json"}, "html": {"href": "#!/osrf/subt/issues/279/future-enhancement-droppable"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/subt/issues/279/vote"}}, "reporter": {"display_name": "Malcolm Stagg", "uuid": "{eee13832-fdd5-4196-aa05-6cfdb1118c65}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beee13832-fdd5-4196-aa05-6cfdb1118c65%7D"}, "html": {"href": "https://bitbucket.org/%7Beee13832-fdd5-4196-aa05-6cfdb1118c65%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8c08ab97dc600bddad36e4a58f8cc5afd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMS-3.png"}}, "nickname": "malcolmst7", "type": "user", "account_id": "557058:08ef8b07-1500-4917-989c-89f91ce4beac"}, "title": "Future enhancement: Droppable communications repeater nodes", "component": null, "votes": 0, "watches": 4, "content": {"raw": "As a future enhancement \\(not necessarily for Urban Circuit since this is probably a larger change\\), I would like to suggest we have robots capable of carrying dropping nodes, where each node is capable of relaying messages and similar communications-related functionality. This is a capability which would be possible in the real world, so it would be nice to enable it for the virtual track as well. \r\n\r\nThese communications nodes could potentially help extend communications distances and store information \\(warning messages, mapping data, \u2026\\) to help peer robots which are out of range.\r\n\r\nI believe there are a couple options for how this could work:\r\n\r\n**1\\) Competitor-defined nodes**\r\n\r\nEach communications node could be defined similarly to a robot. No locomotion/actuators/sensors would be necessary. The node would have 2 states: `carried` and `dropped`. It would be somehow tied to a parent robot \\(e.g. maybe by name \u2013 COMM1X1 could be a comm node carried by a robot named X1\\). An ROS service could be used to change the state from `carried` to `dropped`. Upon entering the dropped state, the node position would no longer be tied to the parent robot, and normal physics rules would apply.\r\n\r\nThis option would allow the competitors to write custom controller code for the node, and it would be subject to the same limitations as other robots \\(operating on its own isolated VM, limited by communication distances, etc\u2026\\). The node would, however, only be capable of communications and data processing related functionality due to its lack of sensors and actuation.\r\n\r\n**2\\) Predefined nodes**\r\n\r\nIn this case, each communications node could be defined similarly to a sensor/actuator. It would run predefined code capable of some functions such as repeating a message to another destination and/or queryable data storage. A robot could carry several of these nodes, as defined by its sensor configuration. Again, an ROS service could be used to change the state from `carried` to `dropped`, at which point it would no longer be tied to its parent robot, and normal physics rules would apply.", "markup": "markdown", "html": "<p>As a future enhancement (not necessarily for Urban Circuit since this is probably a larger change), I would like to suggest we have robots capable of carrying dropping nodes, where each node is capable of relaying messages and similar communications-related functionality. This is a capability which would be possible in the real world, so it would be nice to enable it for the virtual track as well. </p>\n<p>These communications nodes could potentially help extend communications distances and store information (warning messages, mapping data, \u2026) to help peer robots which are out of range.</p>\n<p>I believe there are a couple options for how this could work:</p>\n<p><strong>1) Competitor-defined nodes</strong></p>\n<p>Each communications node could be defined similarly to a robot. No locomotion/actuators/sensors would be necessary. The node would have 2 states: <code>carried</code> and <code>dropped</code>. It would be somehow tied to a parent robot (e.g. maybe by name \u2013 COMM1X1 could be a comm node carried by a robot named X1). An ROS service could be used to change the state from <code>carried</code> to <code>dropped</code>. Upon entering the dropped state, the node position would no longer be tied to the parent robot, and normal physics rules would apply.</p>\n<p>This option would allow the competitors to write custom controller code for the node, and it would be subject to the same limitations as other robots (operating on its own isolated VM, limited by communication distances, etc\u2026). The node would, however, only be capable of communications and data processing related functionality due to its lack of sensors and actuation.</p>\n<p><strong>2) Predefined nodes</strong></p>\n<p>In this case, each communications node could be defined similarly to a sensor/actuator. It would run predefined code capable of some functions such as repeating a message to another destination and/or queryable data storage. A robot could carry several of these nodes, as defined by its sensor configuration. Again, an ROS service could be used to change the state from <code>carried</code> to <code>dropped</code>, at which point it would no longer be tied to its parent robot, and normal physics rules would apply.</p>", "type": "rendered"}, "assignee": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "state": "new", "version": null, "edited_on": null, "created_on": "2019-11-30T12:04:22.181271+00:00", "milestone": null, "updated_on": "2019-11-30T20:22:11.294801+00:00", "type": "issue", "id": 279}