{"links": {"self": {"href": "data/repositories/osrf/subt/issues/202/comments/54093346.json"}, "html": {"href": "#!/osrf/subt/issues/202#comment-54093346"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/subt/issues/202.json"}}, "type": "issue", "id": 202, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "title": "Slow AWS initialization?"}, "content": {"raw": "Nonetheless, here is a generic example answer from the [subt\\_helloworld development branch example](https://bitbucket.org/jgrogers/subt_hello_world/wiki/Home):\n\nEnsure you have an entrypoint set in your `Dockerfile` such as `ENTRYPOINT [\"./run_sim.sh\"]` from [here](https://bitbucket.org/jgrogers/subt_hello_world/src/development/docker/helloworld_submit/Dockerfile).  Also note that this script needs to be copied into the image whenever you\u2019re building the docker image.\n\nInside of the script you call as the entrypoint, ensure that you are sourcing your environment appropriately as `~/.bashrc` is not sourced when entering in this manner.  If you call multiple launch files or nodes inside of this script, ensure you start all but the last one you want to `hang` with an `&` to run the predecessor scripts/files/nodes in the background to ensure everything is launched up until your last line that will hang until the end of the run.  An example from `run_sim.sh` is [here](https://bitbucket.org/jgrogers/subt_hello_world/src/development/docker/helloworld_submit/run_sim.sh):\n\n\u200c\n\n```\n#!/usr/bin/env bash\n\n. /opt/ros/melodic/setup.bash\n. ~/subt_ws/install/setup.sh\n. ~/workspaces/catkin_build_ws/devel/setup.bash\n\nexec roslaunch helloworld_subt_launch robot.launch name:=alpha other_robot:=bravo perception:=true comms:=false control:=true fake_report:=false\n```\n\nwhile the launch file ran example is [here](https://bitbucket.org/jgrogers/subt_hello_world/src/development/catkin_build_ws/src/helloworld_subt_launch/launch/robot.launch):\n\n\u200c\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<launch>\n  <!-- The name/namespace of this robot -->\n  <arg name=\"name\"/>\n  <!-- The type of this robot (e.g. x1, x2, etc) -->\n  <arg name=\"type\" default=\"x1\"/>\n  <!-- Enable mapping subsystem -->\n  <arg name=\"mapping\" default=\"true\"/>\n  <!-- The mapping mode of this robot (e.g. 2d or 3d) -->\n  <arg name=\"mapping_mode\" default=\"3d\"/>\n  <!-- Enable control subsystem (wall-following behavior) -->\n  <arg name=\"control\" default=\"true\" />\n  <arg name=\"wall_follow\" default=\"false\"/>\n  <arg name=\"frontier_exploration\" default=\"true\"/>\n  <!-- Enable perception (object detection) -->\n  <arg name=\"perception\" default=\"true\"/>\n  <!-- Enable tensorflow object detector -->\n  <arg name=\"tensorflow_object_detector\" default=\"true\"/>\n  <!-- Enable Darknet (DNN object classifier) -->\n  <arg name=\"darknet\" default=\"false\"/>\n  <!-- Enable ground truth perception (logical camera) -->\n  <arg name=\"perception_ground_truth\" default=\"false\"/>\n  <!-- Enable object detection communication -->\n  <arg name=\"comms\" default=\"true\"/>\n  <arg name=\"other_robot\"/>\n\n  <!-- You'll want this if your odometry frame on <vehicle_name>/odom is <vehcle_name>->base_link without a prefix -->\n  <node pkg=\"tf2_ros\" type=\"static_transform_publisher\" name=\"static_base\" args=\" 0 0 0 0 0 0 $(arg name)/base_link base_link\"/>\n\n  <group ns=\"$(arg name)\">\n\n    <!-- Clear out IMU bias on startup -->\n    <node pkg=\"rosservice\" type=\"rosservice\" name=\"calib_imu\" args=\"call --wait imu/data/set_accel_bias 'bias: {x: 0.0, y: 0.0, z: 0.0}'\"/> \n    <node pkg=\"rosservice\" type=\"rosservice\" name=\"calib_gyro\" args=\"call --wait imu/data/set_rate_bias 'bias: {x: 0.0, y: 0.0, z: 0.0}'\"/> \n \n    <!-- Mapping setup -->\n    <group if=\"$(arg mapping)\">\n      <!-- Cartographer setup -->\n      <include file=\"$(find helloworld_subt_launch)/launch/cartographer.launch\">\n        <arg name=\"name\" value=\"$(arg name)\"/>\n        <arg name=\"mode\" value=\"$(arg mapping_mode)\"/>\n        <arg name=\"type\" value=\"$(arg type)\"/>\n      </include>\n\n      <node pkg=\"nodelet\" type=\"nodelet\" name=\"pcl_manager\" args=\"manager\" output=\"screen\" />\n\n      <!-- Run a passthrough filter to clean self returns -->\n      <node pkg=\"nodelet\" type=\"nodelet\" name=\"passthrough_x\" args=\"load pcl/PassThrough pcl_manager\" output=\"screen\">\n        <remap from=\"~input\" to=\"points\" />\n        <remap from=\"~output\" to=\"ptx\" />\n        <rosparam>\n          filter_field_name: x\n          filter_limit_min: -0.40\n          filter_limit_max:  0.40\n          filter_limit_negative: True\n        </rosparam>\n      </node>\n\n      <node pkg=\"nodelet\" type=\"nodelet\" name=\"passthrough_y\" args=\"load pcl/PassThrough pcl_manager\" output=\"screen\">\n        <remap from=\"~input\" to=\"ptx\" />\n        <remap from=\"~output\" to=\"points_filtered\" />\n        <rosparam>\n          filter_field_name: y\n          filter_limit_min: -0.40\n          filter_limit_max:  0.40\n          filter_limit_negative: True\n        </rosparam>\n      </node>\n\n      <!-- Octomap setup -->\n      <node pkg=\"octomap_server\" type=\"octomap_server_node\" name=\"octomap_server\">\n        <param name=\"resolution\" value=\"0.1\" />\n        <!-- fixed map frame (set to 'map' if SLAM or localization running) -->\n        <param name=\"frame_id\" type=\"string\" value=\"map\" />\n        <!-- maximum range to integrate (speedup!) -->\n        <param name=\"sensor_model/max_range\" value=\"10.0\" />\n        <!-- data source to integrate (PointCloud2) -->\n        <remap from=\"cloud_in\" to=\"points_filtered\"/>\n        <param name=\"filter_ground\" value=\"true\"/>\n        <param name=\"ground_filter/distance\" value=\"0.12\"/>\n        <param name=\"ground_filter/plane_distance\" value=\"0.2\"/>\n        <param name=\"base_frame_id\" value=\"$(arg name)/base_link\"/>\n        <param name=\"pointcloud_max_z\" value=\"1.8\"/>\n        <param name=\"occupancy_min_z\" value=\"0.2\"/>\n      </node>\n\n    </group>\n\n    <!-- Control setup -->\n    <group if=\"$(arg control)\">\n      <!-- Extract planar laser scan -->\n      <node pkg=\"pointcloud_to_laserscan\" type=\"pointcloud_to_laserscan_node\" name=\"ptcld_to_lsrscn\">\n        <param name=\"~min_height\" value=\"0.1\"/>\n        <param name=\"~max_height\" value=\"1.0\"/>\n        <param name=\"~range_max\" value=\"10.0\"/>\n        <remap from=\"cloud_in\" to=\"points\"/>\n      </node>\n\n      <!-- Controller -->\n      <!-- Wall Follower -->\n      <node if=\"$(arg wall_follow)\" pkg=\"wall_follow\" type=\"wall_follow_node\" name=\"wall_follow\" output=\"screen\">\n        <param name=\"name\" value=\"$(arg name)\"/>\n        <param name=\"base_link\" value=\"$(arg name)/base_link\"/>\n        <param name=\"start_delay\" value=\"0\"/>\n      </node>\n\n      <!-- Frontier Exploration http://wiki.ros.org/explore_lite -->\n      <node if=\"$(arg frontier_exploration)\" pkg=\"explore_lite\" type=\"explore\" respawn=\"false\" name=\"explore\" output=\"screen\">\n        <param name=\"robot_base_frame\" value=\"$(arg name)/base_link\"/>\n        <param name=\"costmap_topic\" value=\"move_base/global_costmap/costmap\"/>\n        <param name=\"costmap_updates_topic\" value=\"move_base/global_costmap/costmap_updates\"/>\n        <param name=\"visualize\" value=\"true\"/>\n        <param name=\"planner_frequency\" value=\"0.33\"/>\n        <param name=\"progress_timeout\" value=\"30.0\"/>\n        <param name=\"potential_scale\" value=\"3.0\"/>\n        <param name=\"orientation_scale\" value=\"0.0\"/>\n        <param name=\"gain_scale\" value=\"1.0\"/>\n        <param name=\"transform_tolerance\" value=\"0.3\"/>\n        <param name=\"min_frontier_size\" value=\"0.5\"/>\n      </node>\n\n      <!-- Required for both wall follow and frontier exploration http://wiki.ros.org/husky_navigation -->\n      <node pkg=\"move_base\" type=\"move_base\" respawn=\"false\" name=\"move_base\" output=\"screen\">\n        <param name=\"base_global_planner\" value=\"navfn/NavfnROS\"/>\n        <param name=\"base_local_planner\" value=\"dwa_local_planner/DWAPlannerROS\"/>\n        <rosparam file=\"$(find helloworld_subt_launch)/config/planner.yaml\" command=\"load\" />\n        \n        <rosparam file=\"$(find helloworld_subt_launch)/config/costmap_common_params.yaml\" command=\"load\" ns=\"global_costmap\" />\n        <rosparam file=\"$(find helloworld_subt_launch)/config/costmap_common_params.yaml\" command=\"load\" ns=\"local_costmap\" />\n        <rosparam file=\"$(find helloworld_subt_launch)/config/local_costmap_params.yaml\" command=\"load\" />\n        <rosparam file=\"$(find helloworld_subt_launch)/config/global_costmap_params.yaml\" command=\"load\" />\n        \n        <remap from=\"map\" to=\"projected_map\"/>\n        <!--<rosparam file=\"$(find helloworld_subt_launch)/config/base_local_planner_params.yaml\" command=\"load\" />-->\n      </node>\n      <!--<node pkg=\"move_base\" type=\"move_base\" respawn=\"false\" name=\"move_base\" output=\"screen\">\n        <param name=\"base_global_planner\" value=\"navfn/NavfnROS\"/>\n        <param name=\"base_local_planner\" value=\"dwa_local_planner/DWAPlannerROS\"/>\n        <rosparam file=\"$(find helloworld_subt_launch)/config/planner.yaml\" command=\"load\" />\n        \n        <rosparam file=\"$(find helloworld_subt_launch)/config/costmap_common.yaml\" command=\"load\" ns=\"global_costmap\" />\n        <rosparam file=\"$(find helloworld_subt_launch)/config/costmap_common.yaml\" command=\"load\" ns=\"local_costmap\" />\n        \n        <rosparam file=\"$(find helloworld_subt_launch)/config/costmap_local.yaml\" command=\"load\" />\n        <param name=\"local_costmap/width\" value=\"10.0\"/>\n        <param name=\"local_costmap/height\" value=\"10.0\"/>\n        \n        <rosparam file=\"$(find helloworld_subt_launch)/config/costmap_global_static.yaml\" command=\"load\" ns=\"global_costmap\" />\n        <remap from=\"map\" to=\"$(arg name)/projected_map\"/>\n      </node>-->\n      <!--<node pkg=\"move_base\" type=\"move_base\" respawn=\"false\" name=\"move_base\" output=\"screen\">\n        <rosparam file=\"$(find helloworld_subt_launch)/config/costmap_common_params.yaml\" command=\"load\" ns=\"global_costmap\" />\n        <rosparam file=\"$(find helloworld_subt_launch)/config/costmap_common_params.yaml\" command=\"load\" ns=\"local_costmap\" />\n        <rosparam file=\"$(find helloworld_subt_launch)/config/local_costmap_params.yaml\" command=\"load\" />\n        <rosparam file=\"$(find helloworld_subt_launch)/config/global_costmap_params.yaml\" command=\"load\" />\n        <rosparam file=\"$(find helloworld_subt_launch)/config/base_local_planner_params.yaml\" command=\"load\" />\n      </node>-->\n    \n    </group>\n\n    <!-- Perception setup -->\n    <group if=\"$(arg perception)\">\n      <!-- Use tensorflow object detector -->\n      <node if=\"$(arg tensorflow_object_detector)\" pkg=\"tensorflow_object_detector\" name=\"detect_ros\" type=\"detect_ros.py\" output=\"screen\"> \n        <remap from=\"image\" to=\"front/image_raw\"/>\n      </node>\n\n      <!-- Use logical camera if ground truth is on - Depreciated in Ignition - -->\n      <node if=\"$(arg perception_ground_truth)\" pkg=\"gazebo_logical_camera\" name=\"logical_camera_ros\" type=\"logical_camera_object_reporter_node\" output=\"screen\">\n        <param name=\"detection_frame_id\" value=\"$(arg name)/base_link\"/>\n        <param name=\"report_frame_id\" value=\"$(arg name)/map\"/>\n        <rosparam param=\"objects_to_recognize\">\n          backpack_1: 1\n          toolbox_1: 2\n          extinguisher_1: 3\n          valve_1: 4\n          radio_1: 5\n          Backpack: 7\n        </rosparam>\n      </node>\n\n      <!-- Image labeling for all forms of perception -->\n      <node pkg=\"camera_object_projector\" type=\"camera_object_projector_node\" name=\"camera_object_projector\" output=\"screen\">\n        <remap from=\"image\" to=\"front/image_raw\"/>\n        <remap from=\"camera_info\" to=\"front/camera_info\"/>\n        <remap from=\"object_detections\" to=\"objects\"/>\n      </node> \n       \n    </group>\n\n    <!-- A tf from map to ns/map is needed for each robot (this is not correct but it demonstrates functionality) - Allows map to be dynamic for move base on multiple vehicles -->\n    <node pkg=\"tf2_ros\" type=\"static_transform_publisher\" name=\"map_to_ns_map_stf\" args=\"0 0 0 0 0 0 map $(arg name)/map\" />\n\n    <!-- Communication setup -->\n    <group if=\"$(arg comms)\">\n      <!-- Communication package -->\n      <node pkg=\"comms_example\" name=\"object_detection_comms\" type=\"object_detection_node\" args=\"$(arg name) $(arg name) $(arg other_robot) $(arg other_robot)\" output=\"screen\" />\n    </group>\n\n  </group>\n\n</launch>\n```\n\n\u200c\n\nI hope the generic example is helpful for others.  Note: this has previously worked for me and there have been no changes to this structure since it was last tested.  I did not re-test it before posting this though so there _may_ be small differences/issues present from updates.", "markup": "markdown", "html": "<p>Nonetheless, here is a generic example answer from the <a data-is-external-link=\"true\" href=\"https://bitbucket.org/jgrogers/subt_hello_world/wiki/Home\" rel=\"nofollow\">subt_helloworld development branch example</a>:</p>\n<p>Ensure you have an entrypoint set in your <code>Dockerfile</code> such as <code>ENTRYPOINT [\"./run_sim.sh\"]</code> from <a data-is-external-link=\"true\" href=\"https://bitbucket.org/jgrogers/subt_hello_world/src/development/docker/helloworld_submit/Dockerfile\" rel=\"nofollow\">here</a>.  Also note that this script needs to be copied into the image whenever you\u2019re building the docker image.</p>\n<p>Inside of the script you call as the entrypoint, ensure that you are sourcing your environment appropriately as <code>~/.bashrc</code> is not sourced when entering in this manner.  If you call multiple launch files or nodes inside of this script, ensure you start all but the last one you want to <code>hang</code> with an <code>&amp;</code> to run the predecessor scripts/files/nodes in the background to ensure everything is launched up until your last line that will hang until the end of the run.  An example from <code>run_sim.sh</code> is <a data-is-external-link=\"true\" href=\"https://bitbucket.org/jgrogers/subt_hello_world/src/development/docker/helloworld_submit/run_sim.sh\" rel=\"nofollow\">here</a>:</p>\n<p>\u200c</p>\n<div class=\"codehilite language-bash\"><pre><span></span><span class=\"ch\">#!/usr/bin/env bash</span>\n\n. /opt/ros/melodic/setup.bash\n. ~/subt_ws/install/setup.sh\n. ~/workspaces/catkin_build_ws/devel/setup.bash\n\n<span class=\"nb\">exec</span> roslaunch helloworld_subt_launch robot.launch name:<span class=\"o\">=</span>alpha other_robot:<span class=\"o\">=</span>bravo perception:<span class=\"o\">=</span><span class=\"nb\">true</span> comms:<span class=\"o\">=</span><span class=\"nb\">false</span> control:<span class=\"o\">=</span><span class=\"nb\">true</span> fake_report:<span class=\"o\">=</span><span class=\"nb\">false</span>\n</pre></div>\n\n\n<p>while the launch file ran example is <a data-is-external-link=\"true\" href=\"https://bitbucket.org/jgrogers/subt_hello_world/src/development/catkin_build_ws/src/helloworld_subt_launch/launch/robot.launch\" rel=\"nofollow\">here</a>:</p>\n<p>\u200c</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span>\n<span class=\"nt\">&lt;launch&gt;</span>\n  <span class=\"c\">&lt;!-- The name/namespace of this robot --&gt;</span>\n  <span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">&quot;name&quot;</span><span class=\"nt\">/&gt;</span>\n  <span class=\"c\">&lt;!-- The type of this robot (e.g. x1, x2, etc) --&gt;</span>\n  <span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">&quot;type&quot;</span> <span class=\"na\">default=</span><span class=\"s\">&quot;x1&quot;</span><span class=\"nt\">/&gt;</span>\n  <span class=\"c\">&lt;!-- Enable mapping subsystem --&gt;</span>\n  <span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">&quot;mapping&quot;</span> <span class=\"na\">default=</span><span class=\"s\">&quot;true&quot;</span><span class=\"nt\">/&gt;</span>\n  <span class=\"c\">&lt;!-- The mapping mode of this robot (e.g. 2d or 3d) --&gt;</span>\n  <span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">&quot;mapping_mode&quot;</span> <span class=\"na\">default=</span><span class=\"s\">&quot;3d&quot;</span><span class=\"nt\">/&gt;</span>\n  <span class=\"c\">&lt;!-- Enable control subsystem (wall-following behavior) --&gt;</span>\n  <span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">&quot;control&quot;</span> <span class=\"na\">default=</span><span class=\"s\">&quot;true&quot;</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">&quot;wall_follow&quot;</span> <span class=\"na\">default=</span><span class=\"s\">&quot;false&quot;</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">&quot;frontier_exploration&quot;</span> <span class=\"na\">default=</span><span class=\"s\">&quot;true&quot;</span><span class=\"nt\">/&gt;</span>\n  <span class=\"c\">&lt;!-- Enable perception (object detection) --&gt;</span>\n  <span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">&quot;perception&quot;</span> <span class=\"na\">default=</span><span class=\"s\">&quot;true&quot;</span><span class=\"nt\">/&gt;</span>\n  <span class=\"c\">&lt;!-- Enable tensorflow object detector --&gt;</span>\n  <span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">&quot;tensorflow_object_detector&quot;</span> <span class=\"na\">default=</span><span class=\"s\">&quot;true&quot;</span><span class=\"nt\">/&gt;</span>\n  <span class=\"c\">&lt;!-- Enable Darknet (DNN object classifier) --&gt;</span>\n  <span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">&quot;darknet&quot;</span> <span class=\"na\">default=</span><span class=\"s\">&quot;false&quot;</span><span class=\"nt\">/&gt;</span>\n  <span class=\"c\">&lt;!-- Enable ground truth perception (logical camera) --&gt;</span>\n  <span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">&quot;perception_ground_truth&quot;</span> <span class=\"na\">default=</span><span class=\"s\">&quot;false&quot;</span><span class=\"nt\">/&gt;</span>\n  <span class=\"c\">&lt;!-- Enable object detection communication --&gt;</span>\n  <span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">&quot;comms&quot;</span> <span class=\"na\">default=</span><span class=\"s\">&quot;true&quot;</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">&quot;other_robot&quot;</span><span class=\"nt\">/&gt;</span>\n\n  <span class=\"c\">&lt;!-- You&#39;ll want this if your odometry frame on &lt;vehicle_name&gt;/odom is &lt;vehcle_name&gt;-&gt;base_link without a prefix --&gt;</span>\n  <span class=\"nt\">&lt;node</span> <span class=\"na\">pkg=</span><span class=\"s\">&quot;tf2_ros&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;static_transform_publisher&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;static_base&quot;</span> <span class=\"na\">args=</span><span class=\"s\">&quot; 0 0 0 0 0 0 $(arg name)/base_link base_link&quot;</span><span class=\"nt\">/&gt;</span>\n\n  <span class=\"nt\">&lt;group</span> <span class=\"na\">ns=</span><span class=\"s\">&quot;$(arg name)&quot;</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"c\">&lt;!-- Clear out IMU bias on startup --&gt;</span>\n    <span class=\"nt\">&lt;node</span> <span class=\"na\">pkg=</span><span class=\"s\">&quot;rosservice&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;rosservice&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;calib_imu&quot;</span> <span class=\"na\">args=</span><span class=\"s\">&quot;call --wait imu/data/set_accel_bias &#39;bias: {x: 0.0, y: 0.0, z: 0.0}&#39;&quot;</span><span class=\"nt\">/&gt;</span> \n    <span class=\"nt\">&lt;node</span> <span class=\"na\">pkg=</span><span class=\"s\">&quot;rosservice&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;rosservice&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;calib_gyro&quot;</span> <span class=\"na\">args=</span><span class=\"s\">&quot;call --wait imu/data/set_rate_bias &#39;bias: {x: 0.0, y: 0.0, z: 0.0}&#39;&quot;</span><span class=\"nt\">/&gt;</span> \n\n    <span class=\"c\">&lt;!-- Mapping setup --&gt;</span>\n    <span class=\"nt\">&lt;group</span> <span class=\"na\">if=</span><span class=\"s\">&quot;$(arg mapping)&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"c\">&lt;!-- Cartographer setup --&gt;</span>\n      <span class=\"nt\">&lt;include</span> <span class=\"na\">file=</span><span class=\"s\">&quot;$(find helloworld_subt_launch)/launch/cartographer.launch&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">&quot;name&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;$(arg name)&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">&quot;mode&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;$(arg mapping_mode)&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">&quot;type&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;$(arg type)&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/include&gt;</span>\n\n      <span class=\"nt\">&lt;node</span> <span class=\"na\">pkg=</span><span class=\"s\">&quot;nodelet&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;nodelet&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;pcl_manager&quot;</span> <span class=\"na\">args=</span><span class=\"s\">&quot;manager&quot;</span> <span class=\"na\">output=</span><span class=\"s\">&quot;screen&quot;</span> <span class=\"nt\">/&gt;</span>\n\n      <span class=\"c\">&lt;!-- Run a passthrough filter to clean self returns --&gt;</span>\n      <span class=\"nt\">&lt;node</span> <span class=\"na\">pkg=</span><span class=\"s\">&quot;nodelet&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;nodelet&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;passthrough_x&quot;</span> <span class=\"na\">args=</span><span class=\"s\">&quot;load pcl/PassThrough pcl_manager&quot;</span> <span class=\"na\">output=</span><span class=\"s\">&quot;screen&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;remap</span> <span class=\"na\">from=</span><span class=\"s\">&quot;~input&quot;</span> <span class=\"na\">to=</span><span class=\"s\">&quot;points&quot;</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;remap</span> <span class=\"na\">from=</span><span class=\"s\">&quot;~output&quot;</span> <span class=\"na\">to=</span><span class=\"s\">&quot;ptx&quot;</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;rosparam&gt;</span>\n          filter_field_name: x\n          filter_limit_min: -0.40\n          filter_limit_max:  0.40\n          filter_limit_negative: True\n        <span class=\"nt\">&lt;/rosparam&gt;</span>\n      <span class=\"nt\">&lt;/node&gt;</span>\n\n      <span class=\"nt\">&lt;node</span> <span class=\"na\">pkg=</span><span class=\"s\">&quot;nodelet&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;nodelet&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;passthrough_y&quot;</span> <span class=\"na\">args=</span><span class=\"s\">&quot;load pcl/PassThrough pcl_manager&quot;</span> <span class=\"na\">output=</span><span class=\"s\">&quot;screen&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;remap</span> <span class=\"na\">from=</span><span class=\"s\">&quot;~input&quot;</span> <span class=\"na\">to=</span><span class=\"s\">&quot;ptx&quot;</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;remap</span> <span class=\"na\">from=</span><span class=\"s\">&quot;~output&quot;</span> <span class=\"na\">to=</span><span class=\"s\">&quot;points_filtered&quot;</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;rosparam&gt;</span>\n          filter_field_name: y\n          filter_limit_min: -0.40\n          filter_limit_max:  0.40\n          filter_limit_negative: True\n        <span class=\"nt\">&lt;/rosparam&gt;</span>\n      <span class=\"nt\">&lt;/node&gt;</span>\n\n      <span class=\"c\">&lt;!-- Octomap setup --&gt;</span>\n      <span class=\"nt\">&lt;node</span> <span class=\"na\">pkg=</span><span class=\"s\">&quot;octomap_server&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;octomap_server_node&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;octomap_server&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;resolution&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;0.1&quot;</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"c\">&lt;!-- fixed map frame (set to &#39;map&#39; if SLAM or localization running) --&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;frame_id&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;string&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;map&quot;</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"c\">&lt;!-- maximum range to integrate (speedup!) --&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;sensor_model/max_range&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;10.0&quot;</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"c\">&lt;!-- data source to integrate (PointCloud2) --&gt;</span>\n        <span class=\"nt\">&lt;remap</span> <span class=\"na\">from=</span><span class=\"s\">&quot;cloud_in&quot;</span> <span class=\"na\">to=</span><span class=\"s\">&quot;points_filtered&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;filter_ground&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;true&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;ground_filter/distance&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;0.12&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;ground_filter/plane_distance&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;0.2&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;base_frame_id&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;$(arg name)/base_link&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;pointcloud_max_z&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;1.8&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;occupancy_min_z&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;0.2&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/node&gt;</span>\n\n    <span class=\"nt\">&lt;/group&gt;</span>\n\n    <span class=\"c\">&lt;!-- Control setup --&gt;</span>\n    <span class=\"nt\">&lt;group</span> <span class=\"na\">if=</span><span class=\"s\">&quot;$(arg control)&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"c\">&lt;!-- Extract planar laser scan --&gt;</span>\n      <span class=\"nt\">&lt;node</span> <span class=\"na\">pkg=</span><span class=\"s\">&quot;pointcloud_to_laserscan&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;pointcloud_to_laserscan_node&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;ptcld_to_lsrscn&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;~min_height&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;0.1&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;~max_height&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;1.0&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;~range_max&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;10.0&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;remap</span> <span class=\"na\">from=</span><span class=\"s\">&quot;cloud_in&quot;</span> <span class=\"na\">to=</span><span class=\"s\">&quot;points&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/node&gt;</span>\n\n      <span class=\"c\">&lt;!-- Controller --&gt;</span>\n      <span class=\"c\">&lt;!-- Wall Follower --&gt;</span>\n      <span class=\"nt\">&lt;node</span> <span class=\"na\">if=</span><span class=\"s\">&quot;$(arg wall_follow)&quot;</span> <span class=\"na\">pkg=</span><span class=\"s\">&quot;wall_follow&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;wall_follow_node&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;wall_follow&quot;</span> <span class=\"na\">output=</span><span class=\"s\">&quot;screen&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;name&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;$(arg name)&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;base_link&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;$(arg name)/base_link&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;start_delay&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;0&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/node&gt;</span>\n\n      <span class=\"c\">&lt;!-- Frontier Exploration http://wiki.ros.org/explore_lite --&gt;</span>\n      <span class=\"nt\">&lt;node</span> <span class=\"na\">if=</span><span class=\"s\">&quot;$(arg frontier_exploration)&quot;</span> <span class=\"na\">pkg=</span><span class=\"s\">&quot;explore_lite&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;explore&quot;</span> <span class=\"na\">respawn=</span><span class=\"s\">&quot;false&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;explore&quot;</span> <span class=\"na\">output=</span><span class=\"s\">&quot;screen&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;robot_base_frame&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;$(arg name)/base_link&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;costmap_topic&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;move_base/global_costmap/costmap&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;costmap_updates_topic&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;move_base/global_costmap/costmap_updates&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;visualize&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;true&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;planner_frequency&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;0.33&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;progress_timeout&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;30.0&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;potential_scale&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;3.0&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;orientation_scale&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;0.0&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;gain_scale&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;1.0&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;transform_tolerance&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;0.3&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;min_frontier_size&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;0.5&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/node&gt;</span>\n\n      <span class=\"c\">&lt;!-- Required for both wall follow and frontier exploration http://wiki.ros.org/husky_navigation --&gt;</span>\n      <span class=\"nt\">&lt;node</span> <span class=\"na\">pkg=</span><span class=\"s\">&quot;move_base&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;move_base&quot;</span> <span class=\"na\">respawn=</span><span class=\"s\">&quot;false&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;move_base&quot;</span> <span class=\"na\">output=</span><span class=\"s\">&quot;screen&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;base_global_planner&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;navfn/NavfnROS&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;base_local_planner&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;dwa_local_planner/DWAPlannerROS&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;rosparam</span> <span class=\"na\">file=</span><span class=\"s\">&quot;$(find helloworld_subt_launch)/config/planner.yaml&quot;</span> <span class=\"na\">command=</span><span class=\"s\">&quot;load&quot;</span> <span class=\"nt\">/&gt;</span>\n\n        <span class=\"nt\">&lt;rosparam</span> <span class=\"na\">file=</span><span class=\"s\">&quot;$(find helloworld_subt_launch)/config/costmap_common_params.yaml&quot;</span> <span class=\"na\">command=</span><span class=\"s\">&quot;load&quot;</span> <span class=\"na\">ns=</span><span class=\"s\">&quot;global_costmap&quot;</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;rosparam</span> <span class=\"na\">file=</span><span class=\"s\">&quot;$(find helloworld_subt_launch)/config/costmap_common_params.yaml&quot;</span> <span class=\"na\">command=</span><span class=\"s\">&quot;load&quot;</span> <span class=\"na\">ns=</span><span class=\"s\">&quot;local_costmap&quot;</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;rosparam</span> <span class=\"na\">file=</span><span class=\"s\">&quot;$(find helloworld_subt_launch)/config/local_costmap_params.yaml&quot;</span> <span class=\"na\">command=</span><span class=\"s\">&quot;load&quot;</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;rosparam</span> <span class=\"na\">file=</span><span class=\"s\">&quot;$(find helloworld_subt_launch)/config/global_costmap_params.yaml&quot;</span> <span class=\"na\">command=</span><span class=\"s\">&quot;load&quot;</span> <span class=\"nt\">/&gt;</span>\n\n        <span class=\"nt\">&lt;remap</span> <span class=\"na\">from=</span><span class=\"s\">&quot;map&quot;</span> <span class=\"na\">to=</span><span class=\"s\">&quot;projected_map&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"c\">&lt;!--&lt;rosparam file=&quot;$(find helloworld_subt_launch)/config/base_local_planner_params.yaml&quot; command=&quot;load&quot; /&gt;--&gt;</span>\n      <span class=\"nt\">&lt;/node&gt;</span>\n      <span class=\"c\">&lt;!--&lt;node pkg=&quot;move_base&quot; type=&quot;move_base&quot; respawn=&quot;false&quot; name=&quot;move_base&quot; output=&quot;screen&quot;&gt;</span>\n<span class=\"c\">        &lt;param name=&quot;base_global_planner&quot; value=&quot;navfn/NavfnROS&quot;/&gt;</span>\n<span class=\"c\">        &lt;param name=&quot;base_local_planner&quot; value=&quot;dwa_local_planner/DWAPlannerROS&quot;/&gt;</span>\n<span class=\"c\">        &lt;rosparam file=&quot;$(find helloworld_subt_launch)/config/planner.yaml&quot; command=&quot;load&quot; /&gt;</span>\n\n<span class=\"c\">        &lt;rosparam file=&quot;$(find helloworld_subt_launch)/config/costmap_common.yaml&quot; command=&quot;load&quot; ns=&quot;global_costmap&quot; /&gt;</span>\n<span class=\"c\">        &lt;rosparam file=&quot;$(find helloworld_subt_launch)/config/costmap_common.yaml&quot; command=&quot;load&quot; ns=&quot;local_costmap&quot; /&gt;</span>\n\n<span class=\"c\">        &lt;rosparam file=&quot;$(find helloworld_subt_launch)/config/costmap_local.yaml&quot; command=&quot;load&quot; /&gt;</span>\n<span class=\"c\">        &lt;param name=&quot;local_costmap/width&quot; value=&quot;10.0&quot;/&gt;</span>\n<span class=\"c\">        &lt;param name=&quot;local_costmap/height&quot; value=&quot;10.0&quot;/&gt;</span>\n\n<span class=\"c\">        &lt;rosparam file=&quot;$(find helloworld_subt_launch)/config/costmap_global_static.yaml&quot; command=&quot;load&quot; ns=&quot;global_costmap&quot; /&gt;</span>\n<span class=\"c\">        &lt;remap from=&quot;map&quot; to=&quot;$(arg name)/projected_map&quot;/&gt;</span>\n<span class=\"c\">      &lt;/node&gt;--&gt;</span>\n      <span class=\"c\">&lt;!--&lt;node pkg=&quot;move_base&quot; type=&quot;move_base&quot; respawn=&quot;false&quot; name=&quot;move_base&quot; output=&quot;screen&quot;&gt;</span>\n<span class=\"c\">        &lt;rosparam file=&quot;$(find helloworld_subt_launch)/config/costmap_common_params.yaml&quot; command=&quot;load&quot; ns=&quot;global_costmap&quot; /&gt;</span>\n<span class=\"c\">        &lt;rosparam file=&quot;$(find helloworld_subt_launch)/config/costmap_common_params.yaml&quot; command=&quot;load&quot; ns=&quot;local_costmap&quot; /&gt;</span>\n<span class=\"c\">        &lt;rosparam file=&quot;$(find helloworld_subt_launch)/config/local_costmap_params.yaml&quot; command=&quot;load&quot; /&gt;</span>\n<span class=\"c\">        &lt;rosparam file=&quot;$(find helloworld_subt_launch)/config/global_costmap_params.yaml&quot; command=&quot;load&quot; /&gt;</span>\n<span class=\"c\">        &lt;rosparam file=&quot;$(find helloworld_subt_launch)/config/base_local_planner_params.yaml&quot; command=&quot;load&quot; /&gt;</span>\n<span class=\"c\">      &lt;/node&gt;--&gt;</span>\n\n    <span class=\"nt\">&lt;/group&gt;</span>\n\n    <span class=\"c\">&lt;!-- Perception setup --&gt;</span>\n    <span class=\"nt\">&lt;group</span> <span class=\"na\">if=</span><span class=\"s\">&quot;$(arg perception)&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"c\">&lt;!-- Use tensorflow object detector --&gt;</span>\n      <span class=\"nt\">&lt;node</span> <span class=\"na\">if=</span><span class=\"s\">&quot;$(arg tensorflow_object_detector)&quot;</span> <span class=\"na\">pkg=</span><span class=\"s\">&quot;tensorflow_object_detector&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;detect_ros&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;detect_ros.py&quot;</span> <span class=\"na\">output=</span><span class=\"s\">&quot;screen&quot;</span><span class=\"nt\">&gt;</span> \n        <span class=\"nt\">&lt;remap</span> <span class=\"na\">from=</span><span class=\"s\">&quot;image&quot;</span> <span class=\"na\">to=</span><span class=\"s\">&quot;front/image_raw&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/node&gt;</span>\n\n      <span class=\"c\">&lt;!-- Use logical camera if ground truth is on - Depreciated in Ignition - --&gt;</span>\n      <span class=\"nt\">&lt;node</span> <span class=\"na\">if=</span><span class=\"s\">&quot;$(arg perception_ground_truth)&quot;</span> <span class=\"na\">pkg=</span><span class=\"s\">&quot;gazebo_logical_camera&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;logical_camera_ros&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;logical_camera_object_reporter_node&quot;</span> <span class=\"na\">output=</span><span class=\"s\">&quot;screen&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;detection_frame_id&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;$(arg name)/base_link&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;report_frame_id&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;$(arg name)/map&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;rosparam</span> <span class=\"na\">param=</span><span class=\"s\">&quot;objects_to_recognize&quot;</span><span class=\"nt\">&gt;</span>\n          backpack_1: 1\n          toolbox_1: 2\n          extinguisher_1: 3\n          valve_1: 4\n          radio_1: 5\n          Backpack: 7\n        <span class=\"nt\">&lt;/rosparam&gt;</span>\n      <span class=\"nt\">&lt;/node&gt;</span>\n\n      <span class=\"c\">&lt;!-- Image labeling for all forms of perception --&gt;</span>\n      <span class=\"nt\">&lt;node</span> <span class=\"na\">pkg=</span><span class=\"s\">&quot;camera_object_projector&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;camera_object_projector_node&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;camera_object_projector&quot;</span> <span class=\"na\">output=</span><span class=\"s\">&quot;screen&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;remap</span> <span class=\"na\">from=</span><span class=\"s\">&quot;image&quot;</span> <span class=\"na\">to=</span><span class=\"s\">&quot;front/image_raw&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;remap</span> <span class=\"na\">from=</span><span class=\"s\">&quot;camera_info&quot;</span> <span class=\"na\">to=</span><span class=\"s\">&quot;front/camera_info&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;remap</span> <span class=\"na\">from=</span><span class=\"s\">&quot;object_detections&quot;</span> <span class=\"na\">to=</span><span class=\"s\">&quot;objects&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/node&gt;</span> \n\n    <span class=\"nt\">&lt;/group&gt;</span>\n\n    <span class=\"c\">&lt;!-- A tf from map to ns/map is needed for each robot (this is not correct but it demonstrates functionality) - Allows map to be dynamic for move base on multiple vehicles --&gt;</span>\n    <span class=\"nt\">&lt;node</span> <span class=\"na\">pkg=</span><span class=\"s\">&quot;tf2_ros&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;static_transform_publisher&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;map_to_ns_map_stf&quot;</span> <span class=\"na\">args=</span><span class=\"s\">&quot;0 0 0 0 0 0 map $(arg name)/map&quot;</span> <span class=\"nt\">/&gt;</span>\n\n    <span class=\"c\">&lt;!-- Communication setup --&gt;</span>\n    <span class=\"nt\">&lt;group</span> <span class=\"na\">if=</span><span class=\"s\">&quot;$(arg comms)&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"c\">&lt;!-- Communication package --&gt;</span>\n      <span class=\"nt\">&lt;node</span> <span class=\"na\">pkg=</span><span class=\"s\">&quot;comms_example&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;object_detection_comms&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;object_detection_node&quot;</span> <span class=\"na\">args=</span><span class=\"s\">&quot;$(arg name) $(arg name) $(arg other_robot) $(arg other_robot)&quot;</span> <span class=\"na\">output=</span><span class=\"s\">&quot;screen&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/group&gt;</span>\n\n  <span class=\"nt\">&lt;/group&gt;</span>\n\n<span class=\"nt\">&lt;/launch&gt;</span>\n</pre></div>\n\n\n<p>\u200c</p>\n<p>I hope the generic example is helpful for others.  Note: this has previously worked for me and there have been no changes to this structure since it was last tested.  I did not re-test it before posting this though so there <em>may</em> be small differences/issues present from updates.</p>", "type": "rendered"}, "created_on": "2019-09-26T15:48:11.526625+00:00", "user": {"display_name": "Arthur Schang", "uuid": "{1403972a-9b64-442b-a69c-d7e9557e1d87}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B1403972a-9b64-442b-a69c-d7e9557e1d87%7D"}, "html": {"href": "https://bitbucket.org/%7B1403972a-9b64-442b-a69c-d7e9557e1d87%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/initials/AS-0.png"}}, "nickname": "Arthur Schang", "type": "user", "account_id": "557058:14b7fd50-d65a-47a8-825c-fa89681d07bd"}, "updated_on": null, "type": "issue_comment", "id": 54093346}