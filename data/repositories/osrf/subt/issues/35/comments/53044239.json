{"links": {"self": {"href": "data/repositories/osrf/subt/issues/35/comments/53044239.json"}, "html": {"href": "#!/osrf/subt/issues/35#comment-53044239"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/subt/issues/35.json"}}, "type": "issue", "id": 35, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "title": "Replace CommsClient by ROS topic(s)?"}, "content": {"raw": "I think I understand what Zbynek is asking for - effectively a node that will run inside each robot\u2019s docker container, create an instance of the subt CommsClient and then provide an interface to that client via ROS topics. \n\nI have a general idea of how to accomplish this in C\\+\\+ via the ROS ShapeShifter class for arbitrary topics, but I\u2019m not sure that a solution will be good to go in the timeline of the tunnel circuit. \n\nFor accessing the CommsClient from Python in the tunnel circuit, I would suggest one of the following two approaches:\n\n1. Something like [https://cython.org/](https://cython.org) might be a good choice to build a python wrapper around the existing API.  \n2. \\(similar to my generic approach above\\) Write a very simple C\\+\\+ node that creates a CommsClient and sets up exactly the ROS subscribers and publishers you want to use to manage communication from Python.", "markup": "markdown", "html": "<p>I think I understand what Zbynek is asking for - effectively a node that will run inside each robot\u2019s docker container, create an instance of the subt CommsClient and then provide an interface to that client via ROS topics. </p>\n<p>I have a general idea of how to accomplish this in C++ via the ROS ShapeShifter class for arbitrary topics, but I\u2019m not sure that a solution will be good to go in the timeline of the tunnel circuit. </p>\n<p>For accessing the CommsClient from Python in the tunnel circuit, I would suggest one of the following two approaches:</p>\n<ol>\n<li>Something like <a data-is-external-link=\"true\" href=\"https://cython.org\" rel=\"nofollow\">https://cython.org/</a> might be a good choice to build a python wrapper around the existing API.  </li>\n<li>(similar to my generic approach above) Write a very simple C++ node that creates a CommsClient and sets up exactly the ROS subscribers and publishers you want to use to manage communication from Python.</li>\n</ol>", "type": "rendered"}, "created_on": "2019-07-18T15:00:35.120994+00:00", "user": {"display_name": "Jon Fink", "uuid": "{89cf7350-7d3a-4a2e-a6ce-43d49bfe9001}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89cf7350-7d3a-4a2e-a6ce-43d49bfe9001%7D"}, "html": {"href": "https://bitbucket.org/%7B89cf7350-7d3a-4a2e-a6ce-43d49bfe9001%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d3f96b67926116d5c1121e7dc9a1a8f2d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJF-5.png"}}, "nickname": "jonfink-arl", "type": "user", "account_id": "5b90221dfa38ae2c89609691"}, "updated_on": null, "type": "issue_comment", "id": 53044239}