{"priority": "minor", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "links": {"attachments": {"href": "data/repositories/osrf/subt/issues/138/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/subt/issues/138.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/subt/issues/138/watch"}, "comments": {"href": "data/repositories/osrf/subt/issues/138/comments_page=1.json"}, "html": {"href": "#!/osrf/subt/issues/138/final-event-feature-proposal-to-replace"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/subt/issues/138/vote"}}, "reporter": {"display_name": "Zbyn\u011bk Winkler", "uuid": "{d253a02a-aa23-4c28-9bf2-75863acb0ee0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd253a02a-aa23-4c28-9bf2-75863acb0ee0%7D"}, "html": {"href": "https://bitbucket.org/%7Bd253a02a-aa23-4c28-9bf2-75863acb0ee0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/326a12c819c60ee18418b5d01000d03fd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsZW-1.png"}}, "nickname": "Zbyn\u011bk Winkler (robotika)", "type": "user", "account_id": "557058:a92b5a4f-5b91-4853-8dec-b918bd975e70"}, "title": "[Final Event Feature] Proposal to replace CommsClient API with ROS based API", "component": null, "votes": 0, "watches": 9, "content": {"raw": "I propose to replace CommsClient API with the following ROS based API.\r\n\r\nEach robot would have /<ROBOT\\_NAME/comms/receive ROS topic where it would receive messages that the communication model decides are to be received \\(replacing the current Bind\\(callback, address, port\\)\\).\r\n\r\nAdditionally each robot would publish its own messages it wants to send to a topic /<ROBOT\\_NAME>/comms/send. The communication model would listen on this topic and do its thing \\(model the communication\\) and decide who receives it, replacing current SendTo\\(\\).\r\n\r\nThe message would have two fields - address and data. Both topics would be of the same type.\r\n\r\nEffectively, this moves CommsClient inside the Bridge Container and overall simplifies [#!/osrf/subt/wiki/cloudsim\\_architecture](#!/osrf/subt/wiki/cloudsim_architecture).\r\n\r\nThe main advantage of this proposal is to decouple subt repository and teams Solution Container. The teams would be free to base they docker images on whatever they need/want and the only requirement would be to \u201ctalk ROS\u201d. It has the potential to further simplify OSRF SubT release workflow since the prebuilt docker images on DockerHub could now be the only release channel.\r\n\r\nThe ROS based API could be further tuned/improved, the main point of this proposal is the decoupling.", "markup": "markdown", "html": "<p>I propose to replace CommsClient API with the following ROS based API.</p>\n<p>Each robot would have /&lt;ROBOT_NAME/comms/receive ROS topic where it would receive messages that the communication model decides are to be received (replacing the current Bind(callback, address, port)).</p>\n<p>Additionally each robot would publish its own messages it wants to send to a topic /&lt;ROBOT_NAME&gt;/comms/send. The communication model would listen on this topic and do its thing (model the communication) and decide who receives it, replacing current SendTo().</p>\n<p>The message would have two fields - address and data. Both topics would be of the same type.</p>\n<p>Effectively, this moves CommsClient inside the Bridge Container and overall simplifies <a data-is-external-link=\"true\" href=\"#!/osrf/subt/wiki/cloudsim_architecture\" rel=\"nofollow\">#!/osrf/subt/wiki/cloudsim_architecture</a>.</p>\n<p>The main advantage of this proposal is to decouple subt repository and teams Solution Container. The teams would be free to base they docker images on whatever they need/want and the only requirement would be to \u201ctalk ROS\u201d. It has the potential to further simplify OSRF SubT release workflow since the prebuilt docker images on DockerHub could now be the only release channel.</p>\n<p>The ROS based API could be further tuned/improved, the main point of this proposal is the decoupling.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-07-30T05:56:58.083108+00:00", "milestone": null, "updated_on": "2019-10-10T17:06:06.845746+00:00", "type": "issue", "id": 138}