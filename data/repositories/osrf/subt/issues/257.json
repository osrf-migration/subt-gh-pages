{"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "links": {"attachments": {"href": "data/repositories/osrf/subt/issues/257/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/subt/issues/257.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/subt/issues/257/watch"}, "comments": {"href": "data/repositories/osrf/subt/issues/257/comments_page=1.json"}, "html": {"href": "#!/osrf/subt/issues/257/deterministic-simulation-lockstep-run-of"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/subt/issues/257/vote"}}, "reporter": {"display_name": "Zbyn\u011bk Winkler", "uuid": "{d253a02a-aa23-4c28-9bf2-75863acb0ee0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd253a02a-aa23-4c28-9bf2-75863acb0ee0%7D"}, "html": {"href": "https://bitbucket.org/%7Bd253a02a-aa23-4c28-9bf2-75863acb0ee0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/326a12c819c60ee18418b5d01000d03fd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsZW-1.png"}}, "nickname": "Zbyn\u011bk Winkler (robotika)", "type": "user", "account_id": "557058:a92b5a4f-5b91-4853-8dec-b918bd975e70"}, "title": "Deterministic simulation, lockstep run of simulation and controllers", "component": null, "votes": 3, "watches": 9, "content": {"raw": "Our controller is strictly deterministic. When we have our binary log file we can replay what it did and get the exact same results \\(verified against the log\\). However the simulation environment is not deterministic which adds yet another challenge. The amount of non-determinism is significant to the point that it affects the final score. Take the final leaderboard for Tunnel Circuit from here: [https://www.darpa.mil/news-events/2019-10-30](https://www.darpa.mil/news-events/2019-10-30). Only on worlds B and E we got the expected score distribution.\r\n\r\nOne steps towards being able to create and run deterministic tests would be the creation of something called lockstep mode where the simulation and the controller wait for each other. The [PX4 team implemented this for gazebo 9](https://dev.px4.io/master/en/simulation/#lockstep-simulation) and made it the default for their tests. There are many advantages to this:\r\n\r\n* the results of the tests no longer depend on the speed of the computer running them or on the processes scheduler\r\n* when you attach debugger to the controller and step over your code, the simulation will wait so when you decide to continue, everything works just the same as if you never stopped the execution\r\n\r\nMy proposal is to implement this at least for local runs to ease development. Even better would be to implement this for the cloud simulation as well. This way we could side step the troubles with the speed of the AWS machines and make those runs deterministic as well.", "markup": "markdown", "html": "<p>Our controller is strictly deterministic. When we have our binary log file we can replay what it did and get the exact same results (verified against the log). However the simulation environment is not deterministic which adds yet another challenge. The amount of non-determinism is significant to the point that it affects the final score. Take the final leaderboard for Tunnel Circuit from here: <a data-is-external-link=\"true\" href=\"https://www.darpa.mil/news-events/2019-10-30\" rel=\"nofollow\">https://www.darpa.mil/news-events/2019-10-30</a>. Only on worlds B and E we got the expected score distribution.</p>\n<p>One steps towards being able to create and run deterministic tests would be the creation of something called lockstep mode where the simulation and the controller wait for each other. The <a data-is-external-link=\"true\" href=\"https://dev.px4.io/master/en/simulation/#lockstep-simulation\" rel=\"nofollow\">PX4 team implemented this for gazebo 9</a> and made it the default for their tests. There are many advantages to this:</p>\n<ul>\n<li>the results of the tests no longer depend on the speed of the computer running them or on the processes scheduler</li>\n<li>when you attach debugger to the controller and step over your code, the simulation will wait so when you decide to continue, everything works just the same as if you never stopped the execution</li>\n</ul>\n<p>My proposal is to implement this at least for local runs to ease development. Even better would be to implement this for the cloud simulation as well. This way we could side step the troubles with the speed of the AWS machines and make those runs deterministic as well.</p>", "type": "rendered"}, "assignee": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "state": "new", "version": null, "edited_on": null, "created_on": "2019-11-01T09:46:52.588230+00:00", "milestone": null, "updated_on": "2019-12-05T15:39:23.840116+00:00", "type": "issue", "id": 257}