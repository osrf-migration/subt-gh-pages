{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/osrf/subt/issues/270/comments/54760912.json"}, "html": {"href": "#!/osrf/subt/issues/270#comment-54760912"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/subt/issues/270.json"}}, "type": "issue", "id": 270, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "title": "CommsBroker unregister being called?"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2019-11-12T00:24:47.467242+00:00", "user": {"display_name": "Steven Gray", "uuid": "{7470e809-c304-4b17-b986-685f31fa15c3}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7470e809-c304-4b17-b986-685f31fa15c3%7D"}, "html": {"href": "https://bitbucket.org/%7B7470e809-c304-4b17-b986-685f31fa15c3%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/e6bee642b76507eb51c2839771722e68d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSG-0.png"}}, "nickname": "stgray", "type": "user", "account_id": "557058:e6cc7c7b-9d1b-4abe-87d5-5f0da7c863e1"}, "updated_on": null, "type": "issue_comment", "id": 54760912}, {"links": {"self": {"href": "data/repositories/osrf/subt/issues/270/comments/54761220.json"}, "html": {"href": "#!/osrf/subt/issues/270#comment-54761220"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/subt/issues/270.json"}}, "type": "issue", "id": 270, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "title": "CommsBroker unregister being called?"}, "content": {"raw": "I can also see the `warning` message, but it seems to be harmless since it still works.  What is this a problem for you?    \n  \nYou should also try the `subt_seed` example: [#!/osrf/subt\\_seed/src/default/src/subt\\_seed\\_node.cc](#!/osrf/subt_seed/src/default/src/subt_seed_node.cc)\n\n![](data/bitbucket.org/repo/8ze6Mjd/images/818537748-Issue270.gif)\n\u200c", "markup": "markdown", "html": "<p>I can also see the <code>warning</code> message, but it seems to be harmless since it still works.  What is this a problem for you?    </p>\n<p>You should also try the <code>subt_seed</code> example: <a data-is-external-link=\"true\" href=\"#!/osrf/subt_seed/src/default/src/subt_seed_node.cc\" rel=\"nofollow\">#!/osrf/subt_seed/src/default/src/subt_seed_node.cc</a></p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/8ze6Mjd/images/818537748-Issue270.gif\" />\n\u200c</p>", "type": "rendered"}, "created_on": "2019-11-12T01:13:11.816279+00:00", "user": {"display_name": "Alfredo Bencomo", "uuid": "{84891a71-dff2-4b97-8891-9446c16e6f89}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B84891a71-dff2-4b97-8891-9446c16e6f89%7D"}, "html": {"href": "https://bitbucket.org/%7B84891a71-dff2-4b97-8891-9446c16e6f89%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5cf75629ff02b50ea27b2817/82be1d48-d490-4d7b-8ddb-a8093b9417a6/128"}}, "nickname": "bencomo", "type": "user", "account_id": "5cf75629ff02b50ea27b2817"}, "updated_on": null, "type": "issue_comment", "id": 54761220}, {"links": {"self": {"href": "data/repositories/osrf/subt/issues/270/comments/54761223.json"}, "html": {"href": "#!/osrf/subt/issues/270#comment-54761223"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/subt/issues/270.json"}}, "type": "issue", "id": 270, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "title": "CommsBroker unregister being called?"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2019-11-12T01:13:33.369614+00:00", "user": {"display_name": "Alfredo Bencomo", "uuid": "{84891a71-dff2-4b97-8891-9446c16e6f89}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B84891a71-dff2-4b97-8891-9446c16e6f89%7D"}, "html": {"href": "https://bitbucket.org/%7B84891a71-dff2-4b97-8891-9446c16e6f89%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5cf75629ff02b50ea27b2817/82be1d48-d490-4d7b-8ddb-a8093b9417a6/128"}}, "nickname": "bencomo", "type": "user", "account_id": "5cf75629ff02b50ea27b2817"}, "updated_on": null, "type": "issue_comment", "id": 54761223}, {"links": {"self": {"href": "data/repositories/osrf/subt/issues/270/comments/54761351.json"}, "html": {"href": "#!/osrf/subt/issues/270#comment-54761351"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/subt/issues/270.json"}}, "type": "issue", "id": 270, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "title": "CommsBroker unregister being called?"}, "content": {"raw": "The error message about `bind` \u2013 `Broker::Bind() error: Address [X1] already used in a previous Bind()` does seem to break things. The beacon still seems to work, but the callbacks will no longer trigger.\n\nFor example, I start with 2 robots, R1 and R2 and just have each robot send something to the other. This is great the first time, but the callbacks are never triggered again after restarting the comms nodes. \n\nHere\u2019s the code I\u2019m using for simple comms nodes - I did start with `subt_seed_node.cc` and pruned away. I do pass in a robot name as an argument. Video is [here](https://youtu.be/wWcAsHM0u0s)\n\n\u200c\n\n```\n#include <chrono>\n#include <geometry_msgs/Twist.h>\n#include <subt_msgs/PoseFromArtifact.h>\n#include <ros/ros.h>\n#include <std_srvs/SetBool.h>\n#include <rosgraph_msgs/Clock.h>\n\n#include <string>\n\n#include <subt_communication_broker/subt_communication_client.h>\n#include <subt_ign/CommonTypes.hh>\n#include <subt_ign/protobuf/artifact.pb.h>\n\n/// \\brief Communication client.\nstd::unique_ptr<subt::CommsClient> client_;\n\n/// \\brief Name of this robot.\nstd::string robot_name_;\n\nvoid ChatterCallback(const std::string &_srcAddress,\n                                    const std::string &_dstAddress,\n                                    const uint32_t _dstPort,\n                                    const std::string &_data)\n{\n  // Add code to handle communication callbacks.\n  ROS_INFO(\"Message from [%s] to [%s] on port [%u]:\\n [%s]\", _srcAddress.c_str(),\n      _dstAddress.c_str(), _dstPort, _data.c_str());\n}\n\nvoid CommsInit()\n{\n  // Create subt communication client\n  ROS_INFO(\"Starting comms on %s\", robot_name_.c_str());\n  client_.reset(new subt::CommsClient(robot_name_, false, false));\n  client_->Bind(&ChatterCallback, robot_name_, 1001);  // port is last argument\n  client_->StartBeaconInterval(ros::Duration(1.0));  \n}\n\nvoid PingForNeighbors()\n{\n  client_->SendTo(\"Hello from \" + robot_name_, \"R1\", 1001);\n  client_->SendTo(\"Hello from \" + robot_name_, \"R2\", 1001);\n}\n\n\nvoid PrintNeighbors()\n{\n  auto neighbors = client_->Neighbors();\n\n  //for (auto neighbor_info : neighbors)\n  for (auto kvp : client_->Neighbors())\n  {\n    std::string address = kvp.first;\n    double stamp = kvp.second.first;\n    double rssi = kvp.second.second;\n\n    ROS_INFO(\"%s has neighbor %s: stamp %f, rssi %f>\", robot_name_.c_str(),\n        address.c_str(), stamp, rssi);\n  }\n}\n\n/////////////////////////////////////////////////\nint main(int argc, char** argv)\n{\n  // Initialize ros\n  ros::init(argc, argv, \"robot_comms\", ros::init_options::AnonymousName);\n\n  /// \\brief ROS node handler.\n  ros::NodeHandle nh_;\n\n  robot_name_ = argv[1];\n  CommsInit();\n\n  ros::Rate loop_rate(1);\n  while (ros::ok())\n  {\n    PrintNeighbors();\n    PingForNeighbors();\n    ros::spinOnce();\n    loop_rate.sleep();\n  }\n\n  return 0;\n}\n```\n\n\u200c", "markup": "markdown", "html": "<p>The error message about <code>bind</code> \u2013 <code>Broker::Bind() error: Address [X1] already used in a previous Bind()</code> does seem to break things. The beacon still seems to work, but the callbacks will no longer trigger.</p>\n<p>For example, I start with 2 robots, R1 and R2 and just have each robot send something to the other. This is great the first time, but the callbacks are never triggered again after restarting the comms nodes. </p>\n<p>Here\u2019s the code I\u2019m using for simple comms nodes - I did start with <code>subt_seed_node.cc</code> and pruned away. I do pass in a robot name as an argument. Video is <a data-is-external-link=\"true\" href=\"https://youtu.be/wWcAsHM0u0s\" rel=\"nofollow\">here</a></p>\n<p>\u200c</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c c-Singleline\">#include &lt;chrono&gt;</span>\n<span class=\"c c-Singleline\">#include &lt;geometry_msgs/Twist.h&gt;</span>\n<span class=\"c c-Singleline\">#include &lt;subt_msgs/PoseFromArtifact.h&gt;</span>\n<span class=\"c c-Singleline\">#include &lt;ros/ros.h&gt;</span>\n<span class=\"c c-Singleline\">#include &lt;std_srvs/SetBool.h&gt;</span>\n<span class=\"c c-Singleline\">#include &lt;rosgraph_msgs/Clock.h&gt;</span>\n\n<span class=\"c c-Singleline\">#include &lt;string&gt;</span>\n\n<span class=\"c c-Singleline\">#include &lt;subt_communication_broker/subt_communication_client.h&gt;</span>\n<span class=\"c c-Singleline\">#include &lt;subt_ign/CommonTypes.hh&gt;</span>\n<span class=\"c c-Singleline\">#include &lt;subt_ign/protobuf/artifact.pb.h&gt;</span>\n\n/// \\<span class=\"n\">brief</span> <span class=\"n\">Communication</span> <span class=\"n\">client</span>.\n<span class=\"n\">std::unique_ptr</span><span class=\"s\">&lt;subt::CommsClient&gt;</span> <span class=\"n\">client_</span>;\n\n/// \\<span class=\"n\">brief</span> <span class=\"n\">Name</span> <span class=\"k\">of</span> <span class=\"n\">this</span> <span class=\"n\">robot</span>.\n<span class=\"n\">std::string</span> <span class=\"n\">robot_name_</span>;\n\n<span class=\"nb\">void</span> <span class=\"n\">ChatterCallback</span>(<span class=\"n\">const</span> <span class=\"n\">std::string</span> <span class=\"nv\">&amp;_srcAddress</span>,\n                                    <span class=\"n\">const</span> <span class=\"n\">std::string</span> <span class=\"nv\">&amp;_dstAddress</span>,\n                                    <span class=\"n\">const</span> <span class=\"n\">uint32_t</span> <span class=\"n\">_dstPort</span>,\n                                    <span class=\"n\">const</span> <span class=\"n\">std::string</span> <span class=\"nv\">&amp;_data</span>)\n{\n  // <span class=\"n\">Add</span> <span class=\"n\">code</span> <span class=\"nb\">to</span> <span class=\"n\">handle</span> <span class=\"n\">communication</span> <span class=\"n\">callbacks</span>.\n  <span class=\"n\">ROS_INFO</span>(<span class=\"s\">&quot;Message from [%s] to [%s] on port [%u]:\\n [%s]&quot;</span>, <span class=\"n\">_srcAddress</span>.<span class=\"n\">c_str</span>(),\n      <span class=\"n\">_dstAddress</span>.<span class=\"n\">c_str</span>(), <span class=\"n\">_dstPort</span>, <span class=\"n\">_data</span>.<span class=\"n\">c_str</span>());\n}\n\n<span class=\"nb\">void</span> <span class=\"n\">CommsInit</span>()\n{\n  // <span class=\"n\">Create</span> <span class=\"n\">subt</span> <span class=\"n\">communication</span> <span class=\"n\">client</span>\n  <span class=\"n\">ROS_INFO</span>(<span class=\"s\">&quot;Starting comms on %s&quot;</span>, <span class=\"n\">robot_name_</span>.<span class=\"n\">c_str</span>());\n  <span class=\"n\">client_</span>.<span class=\"n\">reset</span>(<span class=\"nb\">new</span> <span class=\"n\">subt::CommsClient</span>(<span class=\"n\">robot_name_</span>, <span class=\"n\">false</span>, <span class=\"n\">false</span>));\n  <span class=\"n\">client_-</span>&gt;<span class=\"n\">Bind</span>(<span class=\"nv\">&amp;ChatterCallback</span>, <span class=\"n\">robot_name_</span>, <span class=\"mi\">1001</span>);  // <span class=\"n\">port</span> <span class=\"k\">is</span> <span class=\"k\">last</span> <span class=\"n\">argument</span>\n  <span class=\"n\">client_-</span>&gt;<span class=\"n\">StartBeaconInterval</span>(<span class=\"n\">ros::Duration</span>(<span class=\"mf\">1.0</span>));  \n}\n\n<span class=\"nb\">void</span> <span class=\"n\">PingForNeighbors</span>()\n{\n  <span class=\"n\">client_-</span>&gt;<span class=\"n\">SendTo</span>(<span class=\"s\">&quot;Hello from &quot;</span> + <span class=\"n\">robot_name_</span>, <span class=\"s\">&quot;R1&quot;</span>, <span class=\"mi\">1001</span>);\n  <span class=\"n\">client_-</span>&gt;<span class=\"n\">SendTo</span>(<span class=\"s\">&quot;Hello from &quot;</span> + <span class=\"n\">robot_name_</span>, <span class=\"s\">&quot;R2&quot;</span>, <span class=\"mi\">1001</span>);\n}\n\n\n<span class=\"nb\">void</span> <span class=\"n\">PrintNeighbors</span>()\n{\n  <span class=\"n\">auto</span> <span class=\"n\">neighbors</span> = <span class=\"n\">client_-</span>&gt;<span class=\"n\">Neighbors</span>();\n\n  //<span class=\"k\">for</span> (<span class=\"n\">auto</span> <span class=\"n\">neighbor_info</span> : <span class=\"n\">neighbors</span>)\n  <span class=\"k\">for</span> (<span class=\"n\">auto</span> <span class=\"n\">kvp</span> : <span class=\"n\">client_-</span>&gt;<span class=\"n\">Neighbors</span>())\n  {\n    <span class=\"n\">std::string</span> <span class=\"n\">address</span> = <span class=\"n\">kvp</span>.<span class=\"nb\">first</span>;\n    <span class=\"n\">double</span> <span class=\"n\">stamp</span> = <span class=\"n\">kvp</span>.<span class=\"n\">second</span>.<span class=\"nb\">first</span>;\n    <span class=\"n\">double</span> <span class=\"n\">rssi</span> = <span class=\"n\">kvp</span>.<span class=\"n\">second</span>.<span class=\"n\">second</span>;\n\n    <span class=\"n\">ROS_INFO</span>(<span class=\"s\">&quot;%s has neighbor %s: stamp %f, rssi %f&gt;&quot;</span>, <span class=\"n\">robot_name_</span>.<span class=\"n\">c_str</span>(),\n        <span class=\"n\">address</span>.<span class=\"n\">c_str</span>(), <span class=\"n\">stamp</span>, <span class=\"n\">rssi</span>);\n  }\n}\n\n/////////////////////////////////////////////////\n<span class=\"nb\">int</span> <span class=\"n\">main</span>(<span class=\"nb\">int</span> <span class=\"n\">argc</span>, <span class=\"n\">char</span>** <span class=\"n\">argv</span>)\n{\n  // <span class=\"n\">Initialize</span> <span class=\"n\">ros</span>\n  <span class=\"n\">ros::init</span>(<span class=\"n\">argc</span>, <span class=\"n\">argv</span>, <span class=\"s\">&quot;robot_comms&quot;</span>, <span class=\"n\">ros::init_options::AnonymousName</span>);\n\n  /// \\<span class=\"n\">brief</span> <span class=\"n\">ROS</span> <span class=\"n\">node</span> <span class=\"n\">handler</span>.\n  <span class=\"n\">ros::NodeHandle</span> <span class=\"n\">nh_</span>;\n\n  <span class=\"n\">robot_name_</span> = <span class=\"n\">argv</span>[<span class=\"mi\">1</span>];\n  <span class=\"n\">CommsInit</span>();\n\n  <span class=\"n\">ros::Rate</span> <span class=\"n\">loop_rate</span>(<span class=\"mi\">1</span>);\n  <span class=\"k\">while</span> (<span class=\"n\">ros::ok</span>())\n  {\n    <span class=\"n\">PrintNeighbors</span>();\n    <span class=\"n\">PingForNeighbors</span>();\n    <span class=\"n\">ros::spinOnce</span>();\n    <span class=\"n\">loop_rate</span>.<span class=\"nb\">sleep</span>();\n  }\n\n  <span class=\"k\">return</span> <span class=\"mi\">0</span>;\n}\n</pre></div>\n\n\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2019-11-12T01:36:33.105917+00:00", "user": {"display_name": "Steven Gray", "uuid": "{7470e809-c304-4b17-b986-685f31fa15c3}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7470e809-c304-4b17-b986-685f31fa15c3%7D"}, "html": {"href": "https://bitbucket.org/%7B7470e809-c304-4b17-b986-685f31fa15c3%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/e6bee642b76507eb51c2839771722e68d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSG-0.png"}}, "nickname": "stgray", "type": "user", "account_id": "557058:e6cc7c7b-9d1b-4abe-87d5-5f0da7c863e1"}, "updated_on": "2019-11-12T02:07:48.063919+00:00", "type": "issue_comment", "id": 54761351}, {"links": {"self": {"href": "data/repositories/osrf/subt/issues/270/comments/54761753.json"}, "html": {"href": "#!/osrf/subt/issues/270#comment-54761753"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/subt/issues/270.json"}}, "type": "issue", "id": 270, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "title": "CommsBroker unregister being called?"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2019-11-12T02:18:37.460288+00:00", "user": {"display_name": "Alfredo Bencomo", "uuid": "{84891a71-dff2-4b97-8891-9446c16e6f89}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B84891a71-dff2-4b97-8891-9446c16e6f89%7D"}, "html": {"href": "https://bitbucket.org/%7B84891a71-dff2-4b97-8891-9446c16e6f89%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5cf75629ff02b50ea27b2817/82be1d48-d490-4d7b-8ddb-a8093b9417a6/128"}}, "nickname": "bencomo", "type": "user", "account_id": "5cf75629ff02b50ea27b2817"}, "updated_on": null, "type": "issue_comment", "id": 54761753}, {"links": {"self": {"href": "data/repositories/osrf/subt/issues/270/comments/54761767.json"}, "html": {"href": "#!/osrf/subt/issues/270#comment-54761767"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/subt/issues/270.json"}}, "type": "issue", "id": 270, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "title": "CommsBroker unregister being called?"}, "content": {"raw": "We will revisit this after Urban.", "markup": "markdown", "html": "<p>We will revisit this after Urban.</p>", "type": "rendered"}, "created_on": "2019-11-12T02:20:18.818274+00:00", "user": {"display_name": "Alfredo Bencomo", "uuid": "{84891a71-dff2-4b97-8891-9446c16e6f89}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B84891a71-dff2-4b97-8891-9446c16e6f89%7D"}, "html": {"href": "https://bitbucket.org/%7B84891a71-dff2-4b97-8891-9446c16e6f89%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5cf75629ff02b50ea27b2817/82be1d48-d490-4d7b-8ddb-a8093b9417a6/128"}}, "nickname": "bencomo", "type": "user", "account_id": "5cf75629ff02b50ea27b2817"}, "updated_on": null, "type": "issue_comment", "id": 54761767}, {"links": {"self": {"href": "data/repositories/osrf/subt/issues/270/comments/56271405.json"}, "html": {"href": "#!/osrf/subt/issues/270#comment-56271405"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/subt/issues/270.json"}}, "type": "issue", "id": 270, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "title": "CommsBroker unregister being called?"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2020-02-21T21:49:23.768728+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": null, "type": "issue_comment", "id": 56271405}], "page": 1, "size": 7}