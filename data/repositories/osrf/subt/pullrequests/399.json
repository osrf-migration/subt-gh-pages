{"rendered": {"description": {"raw": "This is an utility for running some checks over a SubT log file. Right now, it can be used for checking if any object is below a certain height.\r\n\r\nHow do I use it?\r\n\r\n1. Compile and run SubT to generate a log file.\r\n2. Run the log checker. Here\u2019s an example:\r\n\r\n```\r\n./install/lib/subt_ign/log_checker --file=/tmp/ign/logs/state.tlog --topic=/world/urban_circuit_practice_01/dynamic_pose/info --minz=0\r\n```\r\n\r\nMake sure to update the path to your log file, the world name in your topic, and the minimum Z value.\r\n\r\n1. As a human, you can see the verbose output generated by the program. E.g.:\r\n\r\n```\r\n******************************\r\nConfiguration:\r\n  Log file: [/tmp/ign/logs/state.tlog]\r\n  Topic name: [/world/urban_circuit_practice_01/dynamic_pose/info]\r\n  Minimum Z: [0]\r\nOutput report:\r\n  Minimum Z check: [true]\r\n******************************\r\n```\r\n\r\nProgrammatically, you can also check the exit code of the program:\r\n\r\n```\r\necho $?\r\n0\r\n```\r\n\r\nwhere the exit code means:\r\n\r\n`0`: All checks have passed.\r\n\r\n`1`: The checker is not correctly initialized. E.g.: Incorrect path or topic, missing minZ argument.\r\n\r\n`2`: Unable to playback the log file. Unlikely unless there\u2019s some internal error in the player.\r\n\r\n`3`: At least one check hasn\u2019t passed.", "markup": "markdown", "html": "<p>This is an utility for running some checks over a SubT log file. Right now, it can be used for checking if any object is below a certain height.</p>\n<p>How do I use it?</p>\n<ol>\n<li>Compile and run SubT to generate a log file.</li>\n<li>Run the log checker. Here\u2019s an example:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span>./install/lib/subt_ign/log_checker --file=/tmp/ign/logs/state.tlog --topic=/world/urban_circuit_practice_01/dynamic_pose/info --minz=0\n</pre></div>\n\n\n<p>Make sure to update the path to your log file, the world name in your topic, and the minimum Z value.</p>\n<ol>\n<li>As a human, you can see the verbose output generated by the program. E.g.:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span>******************************\nConfiguration:\n  Log file: [/tmp/ign/logs/state.tlog]\n  Topic name: [/world/urban_circuit_practice_01/dynamic_pose/info]\n  Minimum Z: [0]\nOutput report:\n  Minimum Z check: [true]\n******************************\n</pre></div>\n\n\n<p>Programmatically, you can also check the exit code of the program:</p>\n<div class=\"codehilite\"><pre><span></span>echo $?\n0\n</pre></div>\n\n\n<p>where the exit code means:</p>\n<p><code>0</code>: All checks have passed.</p>\n<p><code>1</code>: The checker is not correctly initialized. E.g.: Incorrect path or topic, missing minZ argument.</p>\n<p><code>2</code>: Unable to playback the log file. Unlikely unless there\u2019s some internal error in the player.</p>\n<p><code>3</code>: At least one check hasn\u2019t passed.</p>", "type": "rendered"}, "title": {"raw": "Add log_checker utility", "markup": "markdown", "html": "<p>Add log_checker utility</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This is an utility for running some checks over a SubT log file. Right now, it can be used for checking if any object is below a certain height.\r\n\r\nHow do I use it?\r\n\r\n1. Compile and run SubT to generate a log file.\r\n2. Run the log checker. Here\u2019s an example:\r\n\r\n```\r\n./install/lib/subt_ign/log_checker --file=/tmp/ign/logs/state.tlog --topic=/world/urban_circuit_practice_01/dynamic_pose/info --minz=0\r\n```\r\n\r\nMake sure to update the path to your log file, the world name in your topic, and the minimum Z value.\r\n\r\n1. As a human, you can see the verbose output generated by the program. E.g.:\r\n\r\n```\r\n******************************\r\nConfiguration:\r\n  Log file: [/tmp/ign/logs/state.tlog]\r\n  Topic name: [/world/urban_circuit_practice_01/dynamic_pose/info]\r\n  Minimum Z: [0]\r\nOutput report:\r\n  Minimum Z check: [true]\r\n******************************\r\n```\r\n\r\nProgrammatically, you can also check the exit code of the program:\r\n\r\n```\r\necho $?\r\n0\r\n```\r\n\r\nwhere the exit code means:\r\n\r\n`0`: All checks have passed.\r\n\r\n`1`: The checker is not correctly initialized. E.g.: Incorrect path or topic, missing minZ argument.\r\n\r\n`2`: Unable to playback the log file. Unlikely unless there\u2019s some internal error in the player.\r\n\r\n`3`: At least one check hasn\u2019t passed.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/subt/pullrequests/399/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/subt/diffstat/osrf/subt:1bde169acfcc%0Dfcb68f83effb?from_pullrequest_id=399"}, "commits": {"href": "data/repositories/osrf/subt/pullrequests/399/commits.json"}, "self": {"href": "data/repositories/osrf/subt/pullrequests/399.json"}, "comments": {"href": "data/repositories/osrf/subt/pullrequests/399/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/subt/pullrequests/399/merge"}, "html": {"href": "#!/osrf/subt/pull-requests/399"}, "activity": {"href": "data/repositories/osrf/subt/pullrequests/399/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/subt/diff/osrf/subt:1bde169acfcc%0Dfcb68f83effb?from_pullrequest_id=399"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/subt/pullrequests/399/approve"}, "statuses": {"href": "data/repositories/osrf/subt/pullrequests/399/statuses_page=1.json"}}, "title": "Add log_checker utility", "close_source_branch": true, "reviewers": [{"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, {"display_name": "Arthur Schang", "uuid": "{1403972a-9b64-442b-a69c-d7e9557e1d87}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B1403972a-9b64-442b-a69c-d7e9557e1d87%7D"}, "html": {"href": "https://bitbucket.org/%7B1403972a-9b64-442b-a69c-d7e9557e1d87%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/initials/AS-0.png"}}, "nickname": "Arthur Schang", "type": "user", "account_id": "557058:14b7fd50-d65a-47a8-825c-fa89681d07bd"}, {"display_name": "Angela Maio", "uuid": "{cdc95f92-6897-4f96-b661-b1875267c8f1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcdc95f92-6897-4f96-b661-b1875267c8f1%7D"}, "html": {"href": "https://bitbucket.org/%7Bcdc95f92-6897-4f96-b661-b1875267c8f1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ae8633826268aef93fddf5d270c9639bd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsAM-4.png"}}, "nickname": "Angela Maio", "type": "user", "account_id": "5d4d9e1f2c0fea0d07ca3151"}], "id": 399, "destination": {"commit": {"hash": "fcb68f83effb", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/subt/commit/fcb68f83effb.json"}, "html": {"href": "#!/osrf/subt/commits/fcb68f83effb"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "branch": {"name": "urban_circuit"}}, "created_on": "2020-01-16T22:24:11.544683+00:00", "summary": {"raw": "This is an utility for running some checks over a SubT log file. Right now, it can be used for checking if any object is below a certain height.\r\n\r\nHow do I use it?\r\n\r\n1. Compile and run SubT to generate a log file.\r\n2. Run the log checker. Here\u2019s an example:\r\n\r\n```\r\n./install/lib/subt_ign/log_checker --file=/tmp/ign/logs/state.tlog --topic=/world/urban_circuit_practice_01/dynamic_pose/info --minz=0\r\n```\r\n\r\nMake sure to update the path to your log file, the world name in your topic, and the minimum Z value.\r\n\r\n1. As a human, you can see the verbose output generated by the program. E.g.:\r\n\r\n```\r\n******************************\r\nConfiguration:\r\n  Log file: [/tmp/ign/logs/state.tlog]\r\n  Topic name: [/world/urban_circuit_practice_01/dynamic_pose/info]\r\n  Minimum Z: [0]\r\nOutput report:\r\n  Minimum Z check: [true]\r\n******************************\r\n```\r\n\r\nProgrammatically, you can also check the exit code of the program:\r\n\r\n```\r\necho $?\r\n0\r\n```\r\n\r\nwhere the exit code means:\r\n\r\n`0`: All checks have passed.\r\n\r\n`1`: The checker is not correctly initialized. E.g.: Incorrect path or topic, missing minZ argument.\r\n\r\n`2`: Unable to playback the log file. Unlikely unless there\u2019s some internal error in the player.\r\n\r\n`3`: At least one check hasn\u2019t passed.", "markup": "markdown", "html": "<p>This is an utility for running some checks over a SubT log file. Right now, it can be used for checking if any object is below a certain height.</p>\n<p>How do I use it?</p>\n<ol>\n<li>Compile and run SubT to generate a log file.</li>\n<li>Run the log checker. Here\u2019s an example:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span>./install/lib/subt_ign/log_checker --file=/tmp/ign/logs/state.tlog --topic=/world/urban_circuit_practice_01/dynamic_pose/info --minz=0\n</pre></div>\n\n\n<p>Make sure to update the path to your log file, the world name in your topic, and the minimum Z value.</p>\n<ol>\n<li>As a human, you can see the verbose output generated by the program. E.g.:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span>******************************\nConfiguration:\n  Log file: [/tmp/ign/logs/state.tlog]\n  Topic name: [/world/urban_circuit_practice_01/dynamic_pose/info]\n  Minimum Z: [0]\nOutput report:\n  Minimum Z check: [true]\n******************************\n</pre></div>\n\n\n<p>Programmatically, you can also check the exit code of the program:</p>\n<div class=\"codehilite\"><pre><span></span>echo $?\n0\n</pre></div>\n\n\n<p>where the exit code means:</p>\n<p><code>0</code>: All checks have passed.</p>\n<p><code>1</code>: The checker is not correctly initialized. E.g.: Incorrect path or topic, missing minZ argument.</p>\n<p><code>2</code>: Unable to playback the log file. Unlikely unless there\u2019s some internal error in the player.</p>\n<p><code>3</code>: At least one check hasn\u2019t passed.</p>", "type": "rendered"}, "source": {"commit": {"hash": "63b80926cc53", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/subt/commit/63b80926cc53.json"}, "html": {"href": "#!/osrf/subt/commits/63b80926cc53"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "branch": {"name": "logchecker"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Angela Maio", "uuid": "{cdc95f92-6897-4f96-b661-b1875267c8f1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcdc95f92-6897-4f96-b661-b1875267c8f1%7D"}, "html": {"href": "https://bitbucket.org/%7Bcdc95f92-6897-4f96-b661-b1875267c8f1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ae8633826268aef93fddf5d270c9639bd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsAM-4.png"}}, "nickname": "Angela Maio", "type": "user", "account_id": "5d4d9e1f2c0fea0d07ca3151"}}, {"role": "REVIEWER", "participated_on": "2020-02-12T20:29:12.108885+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Arthur Schang", "uuid": "{1403972a-9b64-442b-a69c-d7e9557e1d87}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B1403972a-9b64-442b-a69c-d7e9557e1d87%7D"}, "html": {"href": "https://bitbucket.org/%7B1403972a-9b64-442b-a69c-d7e9557e1d87%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/initials/AS-0.png"}}, "nickname": "Arthur Schang", "type": "user", "account_id": "557058:14b7fd50-d65a-47a8-825c-fa89681d07bd"}}], "reason": "", "updated_on": "2020-02-12T20:43:02.337867+00:00", "author": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "merge_commit": {"hash": "1bde169acfcc", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/subt/commit/1bde169acfcc.json"}, "html": {"href": "#!/osrf/subt/commits/1bde169acfcc"}}}, "closed_by": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}