{"links": {"self": {"href": "data/repositories/osrf/subt/pullrequests/400/comments/132519873.json"}, "html": {"href": "#!/osrf/subt/pull-requests/400/_/diff#comment-132519873"}}, "parent": {"id": 132513026, "links": {"self": {"href": "data/repositories/osrf/subt/pullrequests/400/comments/132513026.json"}, "html": {"href": "#!/osrf/subt/pull-requests/400/_/diff#comment-132513026"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 400, "links": {"self": {"href": "data/repositories/osrf/subt/pullrequests/400.json"}, "html": {"href": "#!/osrf/subt/pull-requests/400"}}, "title": "[DON'T MERGE] Update launch files to call the correct spawner method"}, "content": {"raw": "Yeah, I expect all of those to work fine. The problem occurs only when you want to spawn a vehicle of the same type more than once. The vehicles are spawned one at a time and in the order of their `robotConfig#` number. When iterating through the list of vehicles, the launcher tries to load the `spawner.rb` associated with the vehicle. The problem comes in when the launcher wants to load a `spawner.rb` more than once. So in the earlier example, `X3C5 X4C6 X3C5`, it fails when spawning the second X3C5 because it has previously seen the path to it's `spawner.rb` script. By fail I mean that it refuses to load a new `spawner.rb` and continues to use the `spawner.rb` that was already loaded, which happens to be the X4C6's `spawner.rb`. If all the configs are different, all the paths to their corresponding `spawner.rb` scripts will be different so there won't be a problem. In the ones you tried, only the following have repeated configs:\n\n* `ign launch -v 4 urban_circuit.ign circuit:=urban worldName:=simple_urban_02 robotName1:=X3 robotConfig1:=X3_SENSOR_CONFIG_5 robotName2:=X5 robotConfig2:=X3_SENSOR_CONFIG_5 robotName3:=X4 robotConfig3:=X4_SENSOR_CONFIG_6`\n    * This works because the repeated configs are right after each other. Even though `require` fails to load the `spawner.rb` for the second X3C5, it will do the right thing because the current `spawn` function is for a X3C5 from the first robot\n* `ign launch -v 4 urban_circuit.ign circuit:=urban worldName:=simple_urban_02 robotName1:=alpha robotConfig1:=X1_SENSOR_CONFIG_4 robotName2:=bravo robotConfig2:=X2_SENSOR_CONFIG_6 robotName3:=charlie robotConfig3:=X1_SENSOR_CONFIG_4`\n    * X1C4 is repeated here, but since it's a \"built-in\" vehicle, it works fine.", "markup": "markdown", "html": "<p>Yeah, I expect all of those to work fine. The problem occurs only when you want to spawn a vehicle of the same type more than once. The vehicles are spawned one at a time and in the order of their <code>robotConfig#</code> number. When iterating through the list of vehicles, the launcher tries to load the <code>spawner.rb</code> associated with the vehicle. The problem comes in when the launcher wants to load a <code>spawner.rb</code> more than once. So in the earlier example, <code>X3C5 X4C6 X3C5</code>, it fails when spawning the second X3C5 because it has previously seen the path to it's <code>spawner.rb</code> script. By fail I mean that it refuses to load a new <code>spawner.rb</code> and continues to use the <code>spawner.rb</code> that was already loaded, which happens to be the X4C6's <code>spawner.rb</code>. If all the configs are different, all the paths to their corresponding <code>spawner.rb</code> scripts will be different so there won't be a problem. In the ones you tried, only the following have repeated configs:</p>\n<ul>\n<li><code>ign launch -v 4 urban_circuit.ign circuit:=urban worldName:=simple_urban_02 robotName1:=X3 robotConfig1:=X3_SENSOR_CONFIG_5 robotName2:=X5 robotConfig2:=X3_SENSOR_CONFIG_5 robotName3:=X4 robotConfig3:=X4_SENSOR_CONFIG_6</code><ul>\n<li>This works because the repeated configs are right after each other. Even though <code>require</code> fails to load the <code>spawner.rb</code> for the second X3C5, it will do the right thing because the current <code>spawn</code> function is for a X3C5 from the first robot</li>\n</ul>\n</li>\n<li><code>ign launch -v 4 urban_circuit.ign circuit:=urban worldName:=simple_urban_02 robotName1:=alpha robotConfig1:=X1_SENSOR_CONFIG_4 robotName2:=bravo robotConfig2:=X2_SENSOR_CONFIG_6 robotName3:=charlie robotConfig3:=X1_SENSOR_CONFIG_4</code><ul>\n<li>X1C4 is repeated here, but since it's a \"built-in\" vehicle, it works fine.</li>\n</ul>\n</li>\n</ul>", "type": "rendered"}, "created_on": "2020-01-21T16:02:07.327994+00:00", "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "updated_on": "2020-01-21T16:02:07.338828+00:00", "type": "pullrequest_comment", "id": 132519873}