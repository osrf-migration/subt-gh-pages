{"pagelen": 50, "values": [{"update": {"description": "This fixes a deadlock that occurs when `SubtRosRelay::OnPoseFromArtifact` is called concurrently with `SubtRosRelay::OnMessage`. Consider two `subt_seed_node`s with robot names X1 and X2. Let's say X2 sends a message to X1. This is a call to `SubtRosRelay::OnSendTo` which sends the request to Transport and returns immediately. In the mean time, let's say X1 calls `SubtRosRelay::OnPoseFromArtifact`. Since X1 is single threaded node, this call is blocking. Now, if it happens that Tranport is ready to send the message from X2 to X1, it will invoke `SubtRosRelay::OnMessage` from a separate thread. This will in turn make a service call to X1 which happens to be blocking on its service call to `SubtRosRelay::OnPoseFromArtifact`. This results in a deadlock.\r\n\r\nThe solution I found is to use a lock free data structure to queue up messages when they arrive at `SubtRosRelay::OnMessage` and process them in a separate thread.\r\n\r\n* Related PR #272\r\n\r\n## To test\r\n\r\nIn an osrf/subt -b tunnel\\_circut catkin workspace Terminal 1:\r\n\r\n```\r\nign launch cloudsim_sim.ign worldName:=tunnel_circuit_practice_01 robotName1:=X1 robotConfig1:=X1_SENSOR_CONFIG_1 robotName2:=X2 robotConfig2:=X2_SENSOR_CONFIG3\r\n```\r\n\r\nTerminal 2:\r\n\r\n```\r\nign launch cloudsim_bridge.ign worldName:=tunnel_circuit_practice_01 robotName1:=X1 robotConfig1:=X1_SENSOR_CONFIG_1 robotName2:=X2 robotConfig2:=X2_SENSOR_CONFIG3\r\n```\r\n\r\nIn an osrf/subt\\_seed workspace\r\n\r\nTerminal 3:\r\n\r\n```\r\nroslaunch subt_seed x1.launch robot_name:=X1\r\n```\r\n\r\nTerminal 4 launch this before X1 reaches its goal \\(i.e., right after launching X1\\):\r\n\r\n```\r\nroslaunch subt_seed x1.launch robot_name:=X2\r\n```\r\n\r\n**Expected Behavior:** Both robots reach their goals. But without this PR, as soon as X2 is started, both robots start reporting `Failed to call pose_from_artifact_origin service, robot may not exist, be outside staging area, or the service is not available.` As a result, they never reach their goal.", "title": "Fix deadlock between Transport thread and ROS service callbacks", "destination": {"commit": {"hash": "310d79b0c84f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/subt/commit/310d79b0c84f.json"}, "html": {"href": "#!/osrf/subt/commits/310d79b0c84f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "branch": {"name": "tunnel_circuit"}}, "reason": "", "source": {"commit": {"hash": "a97461e7f477", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/subt/commit/a97461e7f477.json"}, "html": {"href": "#!/osrf/subt/commits/a97461e7f477"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "branch": {"name": "comms_deadlock"}}, "state": "MERGED", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "date": "2019-08-26T19:33:28.376885+00:00"}, "pull_request": {"type": "pullrequest", "id": 273, "links": {"self": {"href": "data/repositories/osrf/subt/pullrequests/273.json"}, "html": {"href": "#!/osrf/subt/pull-requests/273"}}, "title": "Fix deadlock between Transport thread and ROS service callbacks"}}, {"approval": {"date": "2019-08-26T19:33:22.825946+00:00", "pullrequest": {"type": "pullrequest", "id": 273, "links": {"self": {"href": "data/repositories/osrf/subt/pullrequests/273.json"}, "html": {"href": "#!/osrf/subt/pull-requests/273"}}, "title": "Fix deadlock between Transport thread and ROS service callbacks"}, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, "pull_request": {"type": "pullrequest", "id": 273, "links": {"self": {"href": "data/repositories/osrf/subt/pullrequests/273.json"}, "html": {"href": "#!/osrf/subt/pull-requests/273"}}, "title": "Fix deadlock between Transport thread and ROS service callbacks"}}, {"update": {"description": "This fixes a deadlock that occurs when `SubtRosRelay::OnPoseFromArtifact` is called concurrently with `SubtRosRelay::OnMessage`. Consider two `subt_seed_node`s with robot names X1 and X2. Let's say X2 sends a message to X1. This is a call to `SubtRosRelay::OnSendTo` which sends the request to Transport and returns immediately. In the mean time, let's say X1 calls `SubtRosRelay::OnPoseFromArtifact`. Since X1 is single threaded node, this call is blocking. Now, if it happens that Tranport is ready to send the message from X2 to X1, it will invoke `SubtRosRelay::OnMessage` from a separate thread. This will in turn make a service call to X1 which happens to be blocking on its service call to `SubtRosRelay::OnPoseFromArtifact`. This results in a deadlock.\r\n\r\nThe solution I found is to use a lock free data structure to queue up messages when they arrive at `SubtRosRelay::OnMessage` and process them in a separate thread.\r\n\r\n* Related PR #272\r\n\r\n## To test\r\n\r\nIn an osrf/subt -b tunnel\\_circut catkin workspace Terminal 1:\r\n\r\n```\r\nign launch cloudsim_sim.ign worldName:=tunnel_circuit_practice_01 robotName1:=X1 robotConfig1:=X1_SENSOR_CONFIG_1 robotName2:=X2 robotConfig2:=X2_SENSOR_CONFIG3\r\n```\r\n\r\nTerminal 2:\r\n\r\n```\r\nign launch cloudsim_bridge.ign worldName:=tunnel_circuit_practice_01 robotName1:=X1 robotConfig1:=X1_SENSOR_CONFIG_1 robotName2:=X2 robotConfig2:=X2_SENSOR_CONFIG3\r\n```\r\n\r\nIn an osrf/subt\\_seed workspace\r\n\r\nTerminal 3:\r\n\r\n```\r\nroslaunch subt_seed x1.launch robot_name:=X1\r\n```\r\n\r\nTerminal 4 launch this before X1 reaches its goal \\(i.e., right after launching X1\\):\r\n\r\n```\r\nroslaunch subt_seed x1.launch robot_name:=X2\r\n```\r\n\r\n**Expected Behavior:** Both robots reach their goals. But without this PR, as soon as X2 is started, both robots start reporting `Failed to call pose_from_artifact_origin service, robot may not exist, be outside staging area, or the service is not available.` As a result, they never reach their goal.", "title": "Fix deadlock between Transport thread and ROS service callbacks", "destination": {"commit": {"hash": "310d79b0c84f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/subt/commit/310d79b0c84f.json"}, "html": {"href": "#!/osrf/subt/commits/310d79b0c84f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "branch": {"name": "tunnel_circuit"}}, "reason": "", "source": {"commit": {"hash": "a97461e7f477", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/subt/commit/a97461e7f477.json"}, "html": {"href": "#!/osrf/subt/commits/a97461e7f477"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "branch": {"name": "comms_deadlock"}}, "state": "OPEN", "author": {"display_name": "Alfredo Bencomo", "uuid": "{84891a71-dff2-4b97-8891-9446c16e6f89}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B84891a71-dff2-4b97-8891-9446c16e6f89%7D"}, "html": {"href": "https://bitbucket.org/%7B84891a71-dff2-4b97-8891-9446c16e6f89%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5cf75629ff02b50ea27b2817/82be1d48-d490-4d7b-8ddb-a8093b9417a6/128"}}, "nickname": "bencomo", "type": "user", "account_id": "5cf75629ff02b50ea27b2817"}, "date": "2019-08-23T15:21:12.098352+00:00"}, "pull_request": {"type": "pullrequest", "id": 273, "links": {"self": {"href": "data/repositories/osrf/subt/pullrequests/273.json"}, "html": {"href": "#!/osrf/subt/pull-requests/273"}}, "title": "Fix deadlock between Transport thread and ROS service callbacks"}}, {"update": {"description": "This fixes a deadlock that occurs when `SubtRosRelay::OnPoseFromArtifact` is called concurrently with `SubtRosRelay::OnMessage`. Consider two `subt_seed_node`s with robot names X1 and X2. Let's say X2 sends a message to X1. This is a call to `SubtRosRelay::OnSendTo` which sends the request to Transport and returns immediately. In the mean time, let's say X1 calls `SubtRosRelay::OnPoseFromArtifact`. Since X1 is single threaded node, this call is blocking. Now, if it happens that Tranport is ready to send the message from X2 to X1, it will invoke `SubtRosRelay::OnMessage` from a separate thread. This will in turn make a service call to X1 which happens to be blocking on its service call to `SubtRosRelay::OnPoseFromArtifact`. This results in a deadlock.\r\n\r\nThe solution I found is to use a lock free data structure to queue up messages when they arrive at `SubtRosRelay::OnMessage` and process them in a separate thread.\r\n\r\n* Related PR #272\r\n\r\n## To test\r\n\r\nIn an osrf/subt -b tunnel_circut catkin workspace\r\nTerminal 1: \r\n```\r\nign launch cloudsim_sim.ign worldName:=tunnel_circuit_practice_01 robotName1:=X1 robotConfig1:=X1_SENSOR_CONFIG_1 robotName2:=X2 robotConfig2:=X2_SENSOR_CONFIG3\r\n```\r\n\r\nTerminal 2: \r\n```\r\nign launch cloudsim_bridge.ign worldName:=tunnel_circuit_practice_01 robotName1:=X1 robotConfig1:=X1_SENSOR_CONFIG_1 robotName2:=X2 robotConfig2:=X2_SENSOR_CONFIG3\r\n```\r\n\r\nIn an osrf/subt_seed workspace\r\n\r\nTerminal 3: \r\n```\r\nroslaunch subt_seed x1.launch robot_name:=X1\r\n```\r\n\r\nTerminal 4 launch this before X1 reaches its goal (i.e., right after launching X1): \r\n```\r\nroslaunch subt_seed x1.launch robot_name:=X2\r\n```\r\n\r\n**Expected Behavior:**\r\nBoth robots reach their goals. But without this PR, as soon as X2 is started, both robots start reporting `Failed to call pose_from_artifact_origin service, robot may not exist, be outside staging area, or the service is not available.` As a result, they never reach their goal.", "title": "Fix deadlock between Transport thread and ROS service callbacks", "destination": {"commit": {"hash": "310d79b0c84f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/subt/commit/310d79b0c84f.json"}, "html": {"href": "#!/osrf/subt/commits/310d79b0c84f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "branch": {"name": "tunnel_circuit"}}, "reason": "", "source": {"commit": {"hash": "a97461e7f477", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/subt/commit/a97461e7f477.json"}, "html": {"href": "#!/osrf/subt/commits/a97461e7f477"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "branch": {"name": "comms_deadlock"}}, "state": "OPEN", "author": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "date": "2019-08-17T21:33:23.152841+00:00"}, "pull_request": {"type": "pullrequest", "id": 273, "links": {"self": {"href": "data/repositories/osrf/subt/pullrequests/273.json"}, "html": {"href": "#!/osrf/subt/pull-requests/273"}}, "title": "Fix deadlock between Transport thread and ROS service callbacks"}}, {"update": {"description": "This fixes a deadlock that occurs when `SubtRosRelay::OnPoseFromArtifact` is called concurrently with `SubtRosRelay::OnMessage`. Consider two `subt_seed_node`s with robot names X1 and X2. Let's say X2 sends a message to X1. This is a call to `SubtRosRelay::OnSendTo` which sends the request to Transport and returns immediately. In the mean time, let's say X1 calls `SubtRosRelay::OnPoseFromArtifact`. Since X1 is single threaded node, this call is blocking. Now, if it happens that Tranport is ready to send the message from X2 to X1, it will invoke `SubtRosRelay::OnMessage` from a separate thread. This will in turn make a service call to X1 which happens to be blocking on its service call to `SubtRosRelay::OnPoseFromArtifact`. This results in a deadlock.\r\n\r\nThe solution I found is to use a lock free data structure to queue up messages when they arrive at `SubtRosRelay::OnMessage` and process them in a separate thread.\r\n\r\n* Related PR #272\r\n\r\n## To test\r\n\r\nIn an osrf/subt -b tunnel_circut catkin workspace\r\nTerminal 1: \r\n```\r\nign launch cloudsim_sim.ign worldName:=tunnel_circuit_practice_01 robotName1:=X1 robotConfig1:=X1_SENSOR_CONFIG_1 robotName2:=X2 robotConfig2:=X2_SENSOR_CONFIG3\r\n```\r\n\r\nTerminal 2: \r\n```\r\nign launch cloudsim_bridge.ign worldName:=tunnel_circuit_practice_01 robotName1:=X1 robotConfig1:=X1_SENSOR_CONFIG_1 robotName2:=X2 robotConfig2:=X2_SENSOR_CONFIG3\r\n```\r\n\r\nIn an osrf/subt_seed workspace\r\n\r\nTerminal 3: \r\n```\r\nroslaunch subt_seed x1.launch robot_name:=X1\r\n```\r\n\r\nTerminal 4 launch this before X1 reaches its goal (i.e., right after launching X1): \r\n```\r\nroslaunch subt_seed x1.launch robot_name:=X2\r\n```\r\n\r\n**Expected Behavior:**\r\nBoth robots reach their goals. But without this PR, as soon as X2 is started, both robots start reporting `Failed to call pose_from_artifact_origin service, robot may not exist, be outside staging area, or the service is not available.` As a result, they never reach their goal.", "title": "Fix deadlock between Transport thread and ROS service callbacks", "destination": {"commit": {"hash": "310d79b0c84f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/subt/commit/310d79b0c84f.json"}, "html": {"href": "#!/osrf/subt/commits/310d79b0c84f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "branch": {"name": "tunnel_circuit"}}, "reason": "", "source": {"commit": {"hash": "4cfae3af427e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/subt/commit/4cfae3af427e.json"}, "html": {"href": "#!/osrf/subt/commits/4cfae3af427e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "branch": {"name": "comms_deadlock"}}, "state": "OPEN", "author": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "date": "2019-08-17T21:30:27.655576+00:00"}, "pull_request": {"type": "pullrequest", "id": 273, "links": {"self": {"href": "data/repositories/osrf/subt/pullrequests/273.json"}, "html": {"href": "#!/osrf/subt/pull-requests/273"}}, "title": "Fix deadlock between Transport thread and ROS service callbacks"}}, {"update": {"description": "This fixes a deadlock that occurs when `SubtRosRelay::OnPoseFromArtifact` is called concurrently with `SubtRosRelay::OnMessage`. Consider two `subt_seed_node`s with robot names X1 and X2. Let's say X2 sends a message to X1. This is a call to `SubtRosRelay::OnSendTo` which sends the request to Transport and returns immediately. In the mean time, let's say X1 calls `SubtRosRelay::OnPoseFromArtifact`. Since X1 is single threaded node, this call is blocking. Now, if it happens that Tranport is ready to send the message from X2 to X1, it will invoke `SubtRosRelay::OnMessage` from a separate thread. This will in turn make a service call to X1 which happens to be blocking on its service call to `SubtRosRelay::OnPoseFromArtifact`. This results in a deadlock.\r\n\r\nThe solution I found is to use a lock free data structure to queue up messages when they arrive at `SubtRosRelay::OnMessage` and process them in a separate thread.\r\n\r\n* Related PR #272\r\n\r\n## To test\r\n\r\nIn an osrf/subt -b tunnel_circut catkin workspace\r\nTerminal 1: \r\n```\r\nign launch cloudsim_sim.ign worldName:=tunnel_circuit_practice_01 robotName1:=X1 robotConfig1:=X1_SENSOR_CONFIG_1 robotName2:=X2 robotConfig2:=X2_SENSOR_CONFIG3\r\n```\r\n\r\nTerminal 2: \r\n```\r\nign launch cloudsim_bridge.ign worldName:=tunnel_circuit_practice_01 robotName1:=X1 robotConfig1:=X1_SENSOR_CONFIG_1 robotName2:=X2 robotConfig2:=X2_SENSOR_CONFIG3\r\n```\r\n\r\nIn an osrf/subt_seed workspace\r\n\r\nTerminal 3: \r\n```\r\nroslaunch subt_seed x1.launch robot_name:=X1\r\n```\r\n\r\nTerminal 4 launch this before X1 reaches its goal (i.e., right after launching X1): \r\n```\r\nroslaunch subt_seed x1.launch robot_name:=X2\r\n```\r\n\r\n**Expected Behavior:**\r\nBoth robots reach their goals. But without this PR, as soon as X2 is started, both robots start reporting `Failed to call pose_from_artifact_origin service, robot may not exist, be outside staging area, or the service is not available.` As a result, they never reach their goal.", "title": "Fix deadlock between Transport thread and ROS service callbacks", "destination": {"commit": {"hash": "310d79b0c84f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/subt/commit/310d79b0c84f.json"}, "html": {"href": "#!/osrf/subt/commits/310d79b0c84f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "branch": {"name": "tunnel_circuit"}}, "reason": "", "source": {"commit": {"hash": "4cfae3af427e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/subt/commit/4cfae3af427e.json"}, "html": {"href": "#!/osrf/subt/commits/4cfae3af427e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "branch": {"name": "comms_deadlock"}}, "state": "OPEN", "author": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "date": "2019-08-17T21:30:27.610613+00:00"}, "pull_request": {"type": "pullrequest", "id": 273, "links": {"self": {"href": "data/repositories/osrf/subt/pullrequests/273.json"}, "html": {"href": "#!/osrf/subt/pull-requests/273"}}, "title": "Fix deadlock between Transport thread and ROS service callbacks"}}]}