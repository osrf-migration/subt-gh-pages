{"rendered": {"description": {"raw": "So, while trying to make the scoring test work I can into the following problems:\r\n\r\n1. The base station is run alongside simulation, and doesn't have access to ros::Time. This is why the CommsClient has a new \"isBasestation\" variable and listens to simulation's clock topic. I think this should be fine for teams. If they accidentally declare their client as \"isBasestation\", then they will try to subscribe to the clock, but the topic won't be available.\r\n\r\n2. At first, I thought the /pose topic was missing static objects, and the GameLogicPlugin was never getting the pose of the artifacts. This lead me to make the GameLogicPlugin a SystemPlugin. However, I later realized that levels would only publish poses of objects that are loaded. I left the GameLogicPlugin as a system plugin, because I think it's slightly more efficient.\r\n\r\n3. I added, and then tried to remove all instances of debug output. If you see something funky with cout/cerr then please go ahead and correct it.\r\n\r\nWhomever tests this, can you also make sure that the ROS api for scoring still works? You should be able to exercise this from the commandline. And, score information should appear on both the ingition and ros /subt/score topics.", "markup": "markdown", "html": "<p>So, while trying to make the scoring test work I can into the following problems:</p>\n<ol>\n<li>\n<p>The base station is run alongside simulation, and doesn't have access to ros::Time. This is why the CommsClient has a new \"isBasestation\" variable and listens to simulation's clock topic. I think this should be fine for teams. If they accidentally declare their client as \"isBasestation\", then they will try to subscribe to the clock, but the topic won't be available.</p>\n</li>\n<li>\n<p>At first, I thought the /pose topic was missing static objects, and the GameLogicPlugin was never getting the pose of the artifacts. This lead me to make the GameLogicPlugin a SystemPlugin. However, I later realized that levels would only publish poses of objects that are loaded. I left the GameLogicPlugin as a system plugin, because I think it's slightly more efficient.</p>\n</li>\n<li>\n<p>I added, and then tried to remove all instances of debug output. If you see something funky with cout/cerr then please go ahead and correct it.</p>\n</li>\n</ol>\n<p>Whomever tests this, can you also make sure that the ROS api for scoring still works? You should be able to exercise this from the commandline. And, score information should appear on both the ingition and ros /subt/score topics.</p>", "type": "rendered"}, "title": {"raw": "More ros removal debugging", "markup": "markdown", "html": "<p>More ros removal debugging</p>", "type": "rendered"}}, "type": "pullrequest", "description": "So, while trying to make the scoring test work I can into the following problems:\r\n\r\n1. The base station is run alongside simulation, and doesn't have access to ros::Time. This is why the CommsClient has a new \"isBasestation\" variable and listens to simulation's clock topic. I think this should be fine for teams. If they accidentally declare their client as \"isBasestation\", then they will try to subscribe to the clock, but the topic won't be available.\r\n\r\n2. At first, I thought the /pose topic was missing static objects, and the GameLogicPlugin was never getting the pose of the artifacts. This lead me to make the GameLogicPlugin a SystemPlugin. However, I later realized that levels would only publish poses of objects that are loaded. I left the GameLogicPlugin as a system plugin, because I think it's slightly more efficient.\r\n\r\n3. I added, and then tried to remove all instances of debug output. If you see something funky with cout/cerr then please go ahead and correct it.\r\n\r\nWhomever tests this, can you also make sure that the ROS api for scoring still works? You should be able to exercise this from the commandline. And, score information should appear on both the ingition and ros /subt/score topics.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/subt/pullrequests/211/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/subt/diffstat/osrf/subt:d0688fe5e8f5%0D3132cd53cf02?from_pullrequest_id=211"}, "commits": {"href": "data/repositories/osrf/subt/pullrequests/211/commits.json"}, "self": {"href": "data/repositories/osrf/subt/pullrequests/211.json"}, "comments": {"href": "data/repositories/osrf/subt/pullrequests/211/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/subt/pullrequests/211/merge"}, "html": {"href": "#!/osrf/subt/pull-requests/211"}, "activity": {"href": "data/repositories/osrf/subt/pullrequests/211/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/subt/diff/osrf/subt:d0688fe5e8f5%0D3132cd53cf02?from_pullrequest_id=211"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/subt/pullrequests/211/approve"}, "statuses": {"href": "data/repositories/osrf/subt/pullrequests/211/statuses_page=1.json"}}, "title": "More ros removal debugging", "close_source_branch": true, "reviewers": [{"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}], "id": 211, "destination": {"commit": {"hash": "3132cd53cf02", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/subt/commit/3132cd53cf02.json"}, "html": {"href": "#!/osrf/subt/commits/3132cd53cf02"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "branch": {"name": "tunnel_circuit"}}, "created_on": "2019-07-19T15:54:16.510876+00:00", "summary": {"raw": "So, while trying to make the scoring test work I can into the following problems:\r\n\r\n1. The base station is run alongside simulation, and doesn't have access to ros::Time. This is why the CommsClient has a new \"isBasestation\" variable and listens to simulation's clock topic. I think this should be fine for teams. If they accidentally declare their client as \"isBasestation\", then they will try to subscribe to the clock, but the topic won't be available.\r\n\r\n2. At first, I thought the /pose topic was missing static objects, and the GameLogicPlugin was never getting the pose of the artifacts. This lead me to make the GameLogicPlugin a SystemPlugin. However, I later realized that levels would only publish poses of objects that are loaded. I left the GameLogicPlugin as a system plugin, because I think it's slightly more efficient.\r\n\r\n3. I added, and then tried to remove all instances of debug output. If you see something funky with cout/cerr then please go ahead and correct it.\r\n\r\nWhomever tests this, can you also make sure that the ROS api for scoring still works? You should be able to exercise this from the commandline. And, score information should appear on both the ingition and ros /subt/score topics.", "markup": "markdown", "html": "<p>So, while trying to make the scoring test work I can into the following problems:</p>\n<ol>\n<li>\n<p>The base station is run alongside simulation, and doesn't have access to ros::Time. This is why the CommsClient has a new \"isBasestation\" variable and listens to simulation's clock topic. I think this should be fine for teams. If they accidentally declare their client as \"isBasestation\", then they will try to subscribe to the clock, but the topic won't be available.</p>\n</li>\n<li>\n<p>At first, I thought the /pose topic was missing static objects, and the GameLogicPlugin was never getting the pose of the artifacts. This lead me to make the GameLogicPlugin a SystemPlugin. However, I later realized that levels would only publish poses of objects that are loaded. I left the GameLogicPlugin as a system plugin, because I think it's slightly more efficient.</p>\n</li>\n<li>\n<p>I added, and then tried to remove all instances of debug output. If you see something funky with cout/cerr then please go ahead and correct it.</p>\n</li>\n</ol>\n<p>Whomever tests this, can you also make sure that the ROS api for scoring still works? You should be able to exercise this from the commandline. And, score information should appear on both the ingition and ros /subt/score topics.</p>", "type": "rendered"}, "source": {"commit": {"hash": "19833a529da9", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/subt/commit/19833a529da9.json"}, "html": {"href": "#!/osrf/subt/commits/19833a529da9"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "branch": {"name": "more_ros_removal_debugging"}}, "comment_count": 11, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2019-07-20T17:12:56.043730+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "REVIEWER", "participated_on": "2019-07-19T20:19:44.887888+00:00", "type": "participant", "approved": false, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2019-07-20T17:14:06.904785+00:00", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "merge_commit": {"hash": "d0688fe5e8f5", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/subt/commit/d0688fe5e8f5.json"}, "html": {"href": "#!/osrf/subt/commits/d0688fe5e8f5"}}}, "closed_by": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}