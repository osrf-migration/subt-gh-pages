{"rendered": {"description": {"raw": "This fixes a deadlock that occurs when `SubtRosRelay::OnPoseFromArtifact` is called concurrently with `SubtRosRelay::OnMessage`. Consider two `subt_seed_node`s with robot names X1 and X2. Let's say X2 sends a message to X1. This is a call to `SubtRosRelay::OnSendTo` which sends the request to Transport and returns immediately. In the mean time, let's say X1 calls `SubtRosRelay::OnPoseFromArtifact`. Since X1 is single threaded node, this call is blocking. Now, if it happens that Tranport is ready to send the message from X2 to X1, it will invoke `SubtRosRelay::OnMessage` from a separate thread. This will in turn make a service call to X1 which happens to be blocking on its service call to `SubtRosRelay::OnPoseFromArtifact`. This results in a deadlock.\r\n\r\nThe solution I found is to use a lock free data structure to queue up messages when they arrive at `SubtRosRelay::OnMessage` and process them in a separate thread.\r\n\r\n* Related PR #272\r\n\r\n## To test\r\n\r\nIn an osrf/subt -b tunnel\\_circut catkin workspace Terminal 1:\r\n\r\n```\r\nign launch cloudsim_sim.ign worldName:=tunnel_circuit_practice_01 robotName1:=X1 robotConfig1:=X1_SENSOR_CONFIG_1 robotName2:=X2 robotConfig2:=X2_SENSOR_CONFIG3\r\n```\r\n\r\nTerminal 2:\r\n\r\n```\r\nign launch cloudsim_bridge.ign worldName:=tunnel_circuit_practice_01 robotName1:=X1 robotConfig1:=X1_SENSOR_CONFIG_1 robotName2:=X2 robotConfig2:=X2_SENSOR_CONFIG3\r\n```\r\n\r\nIn an osrf/subt\\_seed workspace\r\n\r\nTerminal 3:\r\n\r\n```\r\nroslaunch subt_seed x1.launch robot_name:=X1\r\n```\r\n\r\nTerminal 4 launch this before X1 reaches its goal \\(i.e., right after launching X1\\):\r\n\r\n```\r\nroslaunch subt_seed x1.launch robot_name:=X2\r\n```\r\n\r\n**Expected Behavior:** Both robots reach their goals. But without this PR, as soon as X2 is started, both robots start reporting `Failed to call pose_from_artifact_origin service, robot may not exist, be outside staging area, or the service is not available.` As a result, they never reach their goal.", "markup": "markdown", "html": "<p>This fixes a deadlock that occurs when <code>SubtRosRelay::OnPoseFromArtifact</code> is called concurrently with <code>SubtRosRelay::OnMessage</code>. Consider two <code>subt_seed_node</code>s with robot names X1 and X2. Let's say X2 sends a message to X1. This is a call to <code>SubtRosRelay::OnSendTo</code> which sends the request to Transport and returns immediately. In the mean time, let's say X1 calls <code>SubtRosRelay::OnPoseFromArtifact</code>. Since X1 is single threaded node, this call is blocking. Now, if it happens that Tranport is ready to send the message from X2 to X1, it will invoke <code>SubtRosRelay::OnMessage</code> from a separate thread. This will in turn make a service call to X1 which happens to be blocking on its service call to <code>SubtRosRelay::OnPoseFromArtifact</code>. This results in a deadlock.</p>\n<p>The solution I found is to use a lock free data structure to queue up messages when they arrive at <code>SubtRosRelay::OnMessage</code> and process them in a separate thread.</p>\n<ul>\n<li>Related <a href=\"#!/osrf/subt/pull-requests/272/allow-comms-client-under-a-ros-namespace\" rel=\"nofollow\" class=\"ap-connect-link\">PR #272</a></li>\n</ul>\n<h2 id=\"markdown-header-to-test\">To test</h2>\n<p>In an <a href=\"#!/osrf/subt\" rel=\"nofollow\" class=\"ap-connect-link\">osrf/subt</a> -b tunnel_circut catkin workspace Terminal 1:</p>\n<div class=\"codehilite\"><pre><span></span>ign launch cloudsim_sim.ign worldName:=tunnel_circuit_practice_01 robotName1:=X1 robotConfig1:=X1_SENSOR_CONFIG_1 robotName2:=X2 robotConfig2:=X2_SENSOR_CONFIG3\n</pre></div>\n\n\n<p>Terminal 2:</p>\n<div class=\"codehilite\"><pre><span></span>ign launch cloudsim_bridge.ign worldName:=tunnel_circuit_practice_01 robotName1:=X1 robotConfig1:=X1_SENSOR_CONFIG_1 robotName2:=X2 robotConfig2:=X2_SENSOR_CONFIG3\n</pre></div>\n\n\n<p>In an <a href=\"#!/osrf/subt_seed\" rel=\"nofollow\" class=\"ap-connect-link\">osrf/subt_seed</a> workspace</p>\n<p>Terminal 3:</p>\n<div class=\"codehilite\"><pre><span></span>roslaunch subt_seed x1.launch robot_name:=X1\n</pre></div>\n\n\n<p>Terminal 4 launch this before X1 reaches its goal (i.e., right after launching X1):</p>\n<div class=\"codehilite\"><pre><span></span>roslaunch subt_seed x1.launch robot_name:=X2\n</pre></div>\n\n\n<p><strong>Expected Behavior:</strong> Both robots reach their goals. But without this PR, as soon as X2 is started, both robots start reporting <code>Failed to call pose_from_artifact_origin service, robot may not exist, be outside staging area, or the service is not available.</code> As a result, they never reach their goal.</p>", "type": "rendered"}, "title": {"raw": "Fix deadlock between Transport thread and ROS service callbacks", "markup": "markdown", "html": "<p>Fix deadlock between Transport thread and ROS service callbacks</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This fixes a deadlock that occurs when `SubtRosRelay::OnPoseFromArtifact` is called concurrently with `SubtRosRelay::OnMessage`. Consider two `subt_seed_node`s with robot names X1 and X2. Let's say X2 sends a message to X1. This is a call to `SubtRosRelay::OnSendTo` which sends the request to Transport and returns immediately. In the mean time, let's say X1 calls `SubtRosRelay::OnPoseFromArtifact`. Since X1 is single threaded node, this call is blocking. Now, if it happens that Tranport is ready to send the message from X2 to X1, it will invoke `SubtRosRelay::OnMessage` from a separate thread. This will in turn make a service call to X1 which happens to be blocking on its service call to `SubtRosRelay::OnPoseFromArtifact`. This results in a deadlock.\r\n\r\nThe solution I found is to use a lock free data structure to queue up messages when they arrive at `SubtRosRelay::OnMessage` and process them in a separate thread.\r\n\r\n* Related PR #272\r\n\r\n## To test\r\n\r\nIn an osrf/subt -b tunnel\\_circut catkin workspace Terminal 1:\r\n\r\n```\r\nign launch cloudsim_sim.ign worldName:=tunnel_circuit_practice_01 robotName1:=X1 robotConfig1:=X1_SENSOR_CONFIG_1 robotName2:=X2 robotConfig2:=X2_SENSOR_CONFIG3\r\n```\r\n\r\nTerminal 2:\r\n\r\n```\r\nign launch cloudsim_bridge.ign worldName:=tunnel_circuit_practice_01 robotName1:=X1 robotConfig1:=X1_SENSOR_CONFIG_1 robotName2:=X2 robotConfig2:=X2_SENSOR_CONFIG3\r\n```\r\n\r\nIn an osrf/subt\\_seed workspace\r\n\r\nTerminal 3:\r\n\r\n```\r\nroslaunch subt_seed x1.launch robot_name:=X1\r\n```\r\n\r\nTerminal 4 launch this before X1 reaches its goal \\(i.e., right after launching X1\\):\r\n\r\n```\r\nroslaunch subt_seed x1.launch robot_name:=X2\r\n```\r\n\r\n**Expected Behavior:** Both robots reach their goals. But without this PR, as soon as X2 is started, both robots start reporting `Failed to call pose_from_artifact_origin service, robot may not exist, be outside staging area, or the service is not available.` As a result, they never reach their goal.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/subt/pullrequests/273/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/subt/diffstat/osrf/subt:326bc4a6a0f8%0D310d79b0c84f?from_pullrequest_id=273"}, "commits": {"href": "data/repositories/osrf/subt/pullrequests/273/commits.json"}, "self": {"href": "data/repositories/osrf/subt/pullrequests/273.json"}, "comments": {"href": "data/repositories/osrf/subt/pullrequests/273/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/subt/pullrequests/273/merge"}, "html": {"href": "#!/osrf/subt/pull-requests/273"}, "activity": {"href": "data/repositories/osrf/subt/pullrequests/273/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/subt/diff/osrf/subt:326bc4a6a0f8%0D310d79b0c84f?from_pullrequest_id=273"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/subt/pullrequests/273/approve"}, "statuses": {"href": "data/repositories/osrf/subt/pullrequests/273/statuses_page=1.json"}}, "title": "Fix deadlock between Transport thread and ROS service callbacks", "close_source_branch": true, "reviewers": [{"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}], "id": 273, "destination": {"commit": {"hash": "310d79b0c84f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/subt/commit/310d79b0c84f.json"}, "html": {"href": "#!/osrf/subt/commits/310d79b0c84f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "branch": {"name": "tunnel_circuit"}}, "created_on": "2019-08-17T21:30:27.598009+00:00", "summary": {"raw": "This fixes a deadlock that occurs when `SubtRosRelay::OnPoseFromArtifact` is called concurrently with `SubtRosRelay::OnMessage`. Consider two `subt_seed_node`s with robot names X1 and X2. Let's say X2 sends a message to X1. This is a call to `SubtRosRelay::OnSendTo` which sends the request to Transport and returns immediately. In the mean time, let's say X1 calls `SubtRosRelay::OnPoseFromArtifact`. Since X1 is single threaded node, this call is blocking. Now, if it happens that Tranport is ready to send the message from X2 to X1, it will invoke `SubtRosRelay::OnMessage` from a separate thread. This will in turn make a service call to X1 which happens to be blocking on its service call to `SubtRosRelay::OnPoseFromArtifact`. This results in a deadlock.\r\n\r\nThe solution I found is to use a lock free data structure to queue up messages when they arrive at `SubtRosRelay::OnMessage` and process them in a separate thread.\r\n\r\n* Related PR #272\r\n\r\n## To test\r\n\r\nIn an osrf/subt -b tunnel\\_circut catkin workspace Terminal 1:\r\n\r\n```\r\nign launch cloudsim_sim.ign worldName:=tunnel_circuit_practice_01 robotName1:=X1 robotConfig1:=X1_SENSOR_CONFIG_1 robotName2:=X2 robotConfig2:=X2_SENSOR_CONFIG3\r\n```\r\n\r\nTerminal 2:\r\n\r\n```\r\nign launch cloudsim_bridge.ign worldName:=tunnel_circuit_practice_01 robotName1:=X1 robotConfig1:=X1_SENSOR_CONFIG_1 robotName2:=X2 robotConfig2:=X2_SENSOR_CONFIG3\r\n```\r\n\r\nIn an osrf/subt\\_seed workspace\r\n\r\nTerminal 3:\r\n\r\n```\r\nroslaunch subt_seed x1.launch robot_name:=X1\r\n```\r\n\r\nTerminal 4 launch this before X1 reaches its goal \\(i.e., right after launching X1\\):\r\n\r\n```\r\nroslaunch subt_seed x1.launch robot_name:=X2\r\n```\r\n\r\n**Expected Behavior:** Both robots reach their goals. But without this PR, as soon as X2 is started, both robots start reporting `Failed to call pose_from_artifact_origin service, robot may not exist, be outside staging area, or the service is not available.` As a result, they never reach their goal.", "markup": "markdown", "html": "<p>This fixes a deadlock that occurs when <code>SubtRosRelay::OnPoseFromArtifact</code> is called concurrently with <code>SubtRosRelay::OnMessage</code>. Consider two <code>subt_seed_node</code>s with robot names X1 and X2. Let's say X2 sends a message to X1. This is a call to <code>SubtRosRelay::OnSendTo</code> which sends the request to Transport and returns immediately. In the mean time, let's say X1 calls <code>SubtRosRelay::OnPoseFromArtifact</code>. Since X1 is single threaded node, this call is blocking. Now, if it happens that Tranport is ready to send the message from X2 to X1, it will invoke <code>SubtRosRelay::OnMessage</code> from a separate thread. This will in turn make a service call to X1 which happens to be blocking on its service call to <code>SubtRosRelay::OnPoseFromArtifact</code>. This results in a deadlock.</p>\n<p>The solution I found is to use a lock free data structure to queue up messages when they arrive at <code>SubtRosRelay::OnMessage</code> and process them in a separate thread.</p>\n<ul>\n<li>Related <a href=\"#!/osrf/subt/pull-requests/272/allow-comms-client-under-a-ros-namespace\" rel=\"nofollow\" class=\"ap-connect-link\">PR #272</a></li>\n</ul>\n<h2 id=\"markdown-header-to-test\">To test</h2>\n<p>In an <a href=\"#!/osrf/subt\" rel=\"nofollow\" class=\"ap-connect-link\">osrf/subt</a> -b tunnel_circut catkin workspace Terminal 1:</p>\n<div class=\"codehilite\"><pre><span></span>ign launch cloudsim_sim.ign worldName:=tunnel_circuit_practice_01 robotName1:=X1 robotConfig1:=X1_SENSOR_CONFIG_1 robotName2:=X2 robotConfig2:=X2_SENSOR_CONFIG3\n</pre></div>\n\n\n<p>Terminal 2:</p>\n<div class=\"codehilite\"><pre><span></span>ign launch cloudsim_bridge.ign worldName:=tunnel_circuit_practice_01 robotName1:=X1 robotConfig1:=X1_SENSOR_CONFIG_1 robotName2:=X2 robotConfig2:=X2_SENSOR_CONFIG3\n</pre></div>\n\n\n<p>In an <a href=\"#!/osrf/subt_seed\" rel=\"nofollow\" class=\"ap-connect-link\">osrf/subt_seed</a> workspace</p>\n<p>Terminal 3:</p>\n<div class=\"codehilite\"><pre><span></span>roslaunch subt_seed x1.launch robot_name:=X1\n</pre></div>\n\n\n<p>Terminal 4 launch this before X1 reaches its goal (i.e., right after launching X1):</p>\n<div class=\"codehilite\"><pre><span></span>roslaunch subt_seed x1.launch robot_name:=X2\n</pre></div>\n\n\n<p><strong>Expected Behavior:</strong> Both robots reach their goals. But without this PR, as soon as X2 is started, both robots start reporting <code>Failed to call pose_from_artifact_origin service, robot may not exist, be outside staging area, or the service is not available.</code> As a result, they never reach their goal.</p>", "type": "rendered"}, "source": {"commit": {"hash": "a97461e7f477", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/subt/commit/a97461e7f477.json"}, "html": {"href": "#!/osrf/subt/commits/a97461e7f477"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/subt.json"}, "html": {"href": "#!/osrf/subt"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c95f6ad-c304-407c-b838-09597d836552}ts=2272898"}}, "type": "repository", "name": "subt", "full_name": "osrf/subt", "uuid": "{3c95f6ad-c304-407c-b838-09597d836552}"}, "branch": {"name": "comms_deadlock"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}}, {"role": "REVIEWER", "participated_on": "2019-08-26T19:33:22.825946+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}], "reason": "", "updated_on": "2019-08-26T19:33:28.364258+00:00", "author": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "merge_commit": {"hash": "326bc4a6a0f8", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/subt/commit/326bc4a6a0f8.json"}, "html": {"href": "#!/osrf/subt/commits/326bc4a6a0f8"}}}, "closed_by": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}